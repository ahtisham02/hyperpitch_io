import React, { useState, useRef, useMemo, useEffect } from 'react';
import {
  DndContext,
  DragOverlay,
  PointerSensor,
  KeyboardSensor,
  useSensor,
  useSensors,
  closestCenter,
  useDraggable,
  useDroppable,
} from '@dnd-kit/core';
import {
  SortableContext,
  useSortable,
  arrayMove,
  verticalListSortingStrategy,
} from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import img from "../../../assets/img/cards/672e98fa2d1ed0b7d1bf2adb_glass.png";
import * as LucideIcons from 'lucide-react';

function GeneralModal({ isOpen, onClose, title, children, size = 'md' }) {
  if (!isOpen) return null;
  const sizeClasses = { sm: 'max-w-sm', md: 'max-w-md', lg: 'max-w-lg', xl: 'max-w-xl' };
  return (
    <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-[200] p-4 print-hidden">
      <div className={`bg-white p-5 sm:p-6 rounded-xl shadow-2xl w-full ${sizeClasses[size] || sizeClasses.md}`}>
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold text-slate-800">{title}</h3>
          {onClose && (
            <button onClick={onClose} className="text-slate-400 hover:text-slate-600 transition-colors p-1 rounded-full hover:bg-slate-100">
              <LucideIcons.X className="w-5 h-5" />
            </button>
          )}
        </div>
        <div>{children}</div>
      </div>
    </div>
  );
}

function ConfirmationModal({ isOpen, onClose, onConfirm, title, message, confirmText = "Confirm", cancelText = "Cancel", confirmButtonClass = "bg-red-500 hover:bg-red-600" }) {
  if (!isOpen) return null;
  return (
    <GeneralModal isOpen={isOpen} onClose={onClose} title={title}>
      <p className="text-sm text-slate-600 mb-6">{message}</p>
      <div className="flex justify-end space-x-3">
        <button onClick={onClose} className="px-4 py-2 text-sm font-medium text-slate-700 bg-slate-100 hover:bg-slate-200 rounded-md transition-colors">
          {cancelText}
        </button>
        <button onClick={() => { onConfirm(); onClose(); }} className={`px-4 py-2 text-sm font-medium text-white rounded-md transition-colors ${confirmButtonClass}`}>
          {confirmText}
        </button>
      </div>
    </GeneralModal>
  );
}

function InputModal({ isOpen, onClose, onSubmit, title, message, inputLabel, initialValue = "", placeholder = "", submitText = "Submit", cancelText = "Cancel" }) {
  const [inputValue, setInputValue] = React.useState(initialValue);
  React.useEffect(() => { if (isOpen) { setInputValue(initialValue); } }, [isOpen, initialValue]);
  const handleSubmit = () => { onSubmit(inputValue); onClose(); };
  if (!isOpen) return null;
  return (
    <GeneralModal isOpen={isOpen} onClose={onClose} title={title}>
      {message && <p className="text-sm text-slate-600 mb-3">{message}</p>}
      <label htmlFor="input-modal-field" className="block text-xs font-medium text-slate-700 mb-1">{inputLabel}</label>
      <input id="input-modal-field" type="text" value={inputValue} onChange={(e) => setInputValue(e.target.value)} placeholder={placeholder} className="w-full px-3 py-2 border border-slate-300 rounded-md text-sm focus:ring-2 focus:ring-cyan-400 focus:border-cyan-400 transition-shadow shadow-sm" />
      <div className="flex justify-end space-x-3 mt-6">
        <button onClick={onClose} className="px-4 py-2 text-sm font-medium text-slate-700 bg-slate-100 hover:bg-slate-200 rounded-md transition-colors">{cancelText}</button>
        <button onClick={handleSubmit} className="px-4 py-2 text-sm font-medium text-white bg-cyan-500 hover:bg-cyan-600 rounded-md transition-colors">{submitText}</button>
      </div>
    </GeneralModal>
  );
}

function CustomDropdown({ options, value, onChange, placeholder = "Select an option", label, disabled = false, idSuffix = '' }) {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef(null);
  const selectedOption = options.find(opt => opt.value === value);
  useEffect(() => {
    const handleClickOutside = (event) => { if (dropdownRef.current && !dropdownRef.current.contains(event.target)) setIsOpen(false); };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);
  const handleSelect = (optionValue) => { onChange(optionValue); setIsOpen(false); };
  return (
    <div className="relative w-full" ref={dropdownRef}>
      {label && <label className="block text-xs font-medium text-slate-700 mb-1">{label}</label>}
      <button type="button" onClick={() => !disabled && setIsOpen(!isOpen)} disabled={disabled} className={`w-full px-2.5 py-1.5 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-400 focus:border-cyan-400 transition-shadow shadow-sm bg-white text-left flex justify-between items-center ${disabled ? 'bg-slate-100 cursor-not-allowed' : 'cursor-pointer'}`}>
        <span className={selectedOption ? 'text-slate-700' : 'text-slate-400'}>{selectedOption ? selectedOption.label : placeholder}</span>
        <LucideIcons.ChevronDown className={`w-4 h-4 text-slate-500 transition-transform ${isOpen ? 'transform rotate-180' : ''}`} />
      </button>
      {isOpen && !disabled && (
        <ul className="absolute z-10 mt-1 w-full bg-white border border-slate-300 rounded-lg shadow-lg max-h-60 overflow-auto py-1 text-sm">
          {options.map(opt => (<li key={`${opt.value}-${idSuffix}`} onClick={() => handleSelect(opt.value)} className={`px-3 py-2 hover:bg-cyan-50 cursor-pointer ${opt.value === value ? 'bg-cyan-100 text-cyan-700 font-medium' : 'text-slate-700'}`}>{opt.label}</li>))}
        </ul>
      )}
    </div>
  );
}


function generateId(prefix = 'id') { return `${prefix}-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`; }
const textSizeOptions = [ { label: 'Tiny', value: 'text-xs' }, { label: 'Small', value: 'text-sm' }, { label: 'Base', value: 'text-base' }, { label: 'Large', value: 'text-lg' }, { label: 'XL', value: 'text-xl' }, { label: '2XL', value: 'text-2xl' }, { label: '3XL', value: 'text-3xl' }, { label: '4XL', value: 'text-4xl' }, ];
const textAlignOptions = [ { label: 'Left', value: 'text-left', icon: <LucideIcons.AlignLeft className="w-5 h-5" /> }, { label: 'Center', value: 'text-center', icon: <LucideIcons.AlignCenter className="w-5 h-5" /> }, { label: 'Right', value: 'text-right', icon: <LucideIcons.AlignRight className="w-5 h-5" /> } ];
function getItemByPath(obj, pathString) { const path = pathString.replace(/\[(\w+)\]/g, '.$1').replace(/^\./, '').split('.'); let current = obj; for (const key of path) { if (current && typeof current === 'object' && (key in current || (Array.isArray(current) && !isNaN(parseInt(key))))) { current = current[key]; } else { return undefined; } } return current; }
function deleteItemByPath(obj, pathString) { const path = pathString.replace(/\[(\w+)\]/g, '.$1').replace(/^\./, '').split('.'); let current = obj; for (let i = 0; i < path.length - 1; i++) { if (current && typeof current === 'object' && (path[i] in current || (Array.isArray(current) && !isNaN(parseInt(path[i]))))) { current = current[path[i]]; } else { return false; } } const finalKey = path[path.length - 1]; if (Array.isArray(current) && !isNaN(parseInt(finalKey))) { current.splice(parseInt(finalKey), 1); return true; } return false; }
function findItemAndPathRecursive(data, targetId, currentPathBase = '') { if (Array.isArray(data)) { for (let i = 0; i < data.length; i++) { const item = data[i]; const itemPath = `${currentPathBase}[${i}]`; if (item.id === targetId) { return { item, path: itemPath }; } if (item.columns) { const found = findItemAndPathRecursive(item.columns, targetId, `${itemPath}.columns`); if (found) return found; } if (item.elements) { const found = findItemAndPathRecursive(item.elements, targetId, `${itemPath}.elements`); if (found) return found; } } } return null; }

function Header({ text = "Default Header Title", onUpdate, isSelected, sizeClass, textAlign, textColor, isPreviewMode }) { const handleBlur = (e) => { if (onUpdate && !isPreviewMode) onUpdate({ text: e.currentTarget.innerText }); }; return ( <div className={`p-2 ${!isPreviewMode ? `rounded-lg ${isSelected ? 'ring-2 ring-cyan-500 ring-offset-1 bg-cyan-50/70' : 'hover:ring-1 hover:ring-cyan-300/70'}` : ''}`}> <h1 style={{ color: textColor || undefined }} className={`${sizeClass || 'text-xl'} ${textAlign || 'text-left'} font-semibold ${!textColor ? 'text-slate-800' : ''} ${!isPreviewMode ? 'focus:outline-none focus:ring-1 focus:ring-cyan-400 focus:bg-white p-1 -m-1 rounded' : ''} transition-all`} contentEditable={!isPreviewMode} suppressContentEditableWarning onBlur={handleBlur} dangerouslySetInnerHTML={{ __html: text }}></h1> </div> ); }
function TextBlock({ text = "Lorem ipsum dolor sit amet...", onUpdate, isSelected, sizeClass, textAlign, textColor, isPreviewMode }) { const handleBlur = (e) => { if (onUpdate && !isPreviewMode) onUpdate({ text: e.currentTarget.innerText }); }; return ( <div className={`p-2 ${!isPreviewMode ? `rounded-lg ${isSelected ? 'ring-2 ring-cyan-500 ring-offset-1 bg-cyan-50/70' : 'hover:ring-1 hover:ring-cyan-300/70'}` : ''}`}> <p style={{ color: textColor || undefined }} className={`${sizeClass || 'text-base'} ${textAlign || 'text-left'} ${!textColor ? 'text-slate-700' : ''} leading-relaxed ${!isPreviewMode ? 'focus:outline-none focus:ring-1 focus:ring-cyan-400 focus:bg-white p-1 -m-1 rounded whitespace-pre-wrap' : 'whitespace-pre-wrap'} transition-all`} contentEditable={!isPreviewMode} suppressContentEditableWarning onBlur={handleBlur} dangerouslySetInnerHTML={{ __html: text }}></p> </div> ); }
function ImageElement({ src = img, alt = "Placeholder", width = "100%", height = "auto", isSelected, isPreviewMode }) { const getStyleValue = (v) => (v === 'auto' || (typeof v === 'string' && v.endsWith('%'))) ? v : `${parseInt(v, 10) || 'auto'}px`; return ( <div className={`p-1 ${!isPreviewMode ? `rounded-lg ${isSelected ? 'ring-2 ring-cyan-500 ring-offset-1' : 'hover:ring-1 hover:ring-cyan-300/70'}` : ''}`}> <img src={src} alt={alt} className={`max-w-full h-auto block mx-auto ${!isPreviewMode ? 'rounded-md' : 'rounded-md'} transition-all`} style={{ width: getStyleValue(width), height: getStyleValue(height), minHeight: '50px', objectFit: 'contain' }} /> </div> ); }
function ButtonElement({ buttonText = "Click Me", link = "#", onUpdate, isSelected, sizeClass, textAlign, backgroundColor = '#06b6d4', textColor = '#ffffff', borderRadius = '8px', isPreviewMode, onNavigate }) { const handleTextBlur = (e) => { if (onUpdate && !isPreviewMode) onUpdate({ buttonText: e.currentTarget.innerText }); }; const buttonStyle = { backgroundColor: backgroundColor, color: textColor, borderRadius: borderRadius, }; const handleClick = (e) => { if (!isPreviewMode) { e.preventDefault(); return; } if (link && link.startsWith('/')) { e.preventDefault(); if (onNavigate) onNavigate(link.substring(1)); } else if (link === '#') { e.preventDefault(); } }; return ( <div className={`py-3 px-2 ${textAlign || 'text-center'} ${!isPreviewMode && isSelected ? 'ring-2 ring-cyan-500 ring-offset-2 rounded-lg' : ''}`}> <a href={link} onClick={handleClick} target={isPreviewMode && link && !link.startsWith('/') && link !== '#' ? "_blank" : "_self"} rel={isPreviewMode && link && !link.startsWith('/') && link !== '#' ? "noopener noreferrer" : ""} className={`inline-block px-5 py-2.5 font-medium shadow-md hover:opacity-90 transition-opacity ${sizeClass || 'text-sm'}`} style={buttonStyle}><span contentEditable={!isPreviewMode} suppressContentEditableWarning onBlur={handleTextBlur} dangerouslySetInnerHTML={{ __html: buttonText }} className={`${!isPreviewMode ? 'focus:outline-none focus:ring-1 focus:ring-white/50 p-0.5 -m-0.5 rounded-sm' : ''}`}></span></a> </div> ); }
function Divider({ isSelected, isPreviewMode }) { return <div className={`py-3 px-1 ${!isPreviewMode && isSelected ? 'ring-2 ring-cyan-500 ring-offset-1 rounded-lg' : ''}`}><hr className="border-t border-slate-300" /></div>; }
function Spacer({ height = "20px", onUpdate, isSelected, isPreviewMode }) { return <div style={{ height }} className={`w-full transition-all ${!isPreviewMode && isSelected ? 'bg-cyan-100/80 ring-2 ring-cyan-500 ring-offset-1' : (!isPreviewMode ? 'bg-transparent hover:bg-slate-200/50' : '')}`}></div>; }
function IconElement({ iconName = "Star", size = "32px", color = "currentColor", onUpdate, isSelected, isPreviewMode }) { const IconComponent = LucideIcons[iconName] || LucideIcons.HelpCircle;  const ActualIconComponent = IconComponent || LucideIcons.HelpCircle; return ( <div className={`p-2 flex justify-center items-center ${!isPreviewMode && isSelected ? 'ring-2 ring-cyan-500 ring-offset-1 rounded-lg' : ''}`}> <ActualIconComponent style={{ fontSize: size, color: color }} strokeWidth={color === 'currentColor' ? 1.75 : 2} /> </div> ); }
function GoogleMapsPlaceholder({ address = "1600 Amphitheatre Parkway, Mountain View, CA", zoom = 14, onUpdate, isSelected, isPreviewMode }) { return (<div className={`p-3 rounded-lg ${!isPreviewMode ? `${isSelected ? 'ring-2 ring-cyan-500 ring-offset-1 bg-cyan-50/70' : 'bg-slate-100 border border-slate-200 hover:border-cyan-300'}` : 'bg-slate-100 border border-slate-200'} aspect-video flex flex-col items-center justify-center text-center`}><LucideIcons.MapPin className="h-12 w-12 text-slate-400 mb-2" /><p className="text-sm font-medium text-slate-600">{address}</p><p className="text-xs text-slate-500 mt-0.5">Maps Placeholder (Zoom: {zoom})</p></div>); }
function VideoElement({ videoType = 'mp4', src, width = '100%', height = 'auto', controls = true, autoplay = false, loop = false, muted = true, isSelected, isPreviewMode }) { const getYouTubeEmbedUrl = (videoId) => `https://www.youtube.com/embed/${videoId}?autoplay=${autoplay ? 1:0}&loop=${loop ? 1:0}&mute=${muted ? 1:0}&controls=${controls ? 1:0}${loop ? `&playlist=${videoId}` : ''}`; const getVimeoEmbedUrl = (videoId) => `https://player.vimeo.com/video/${videoId}?autoplay=${autoplay ? 1:0}&loop=${loop ? 1:0}&muted=${muted ? 1:0}&controls=${controls ? 1:0}`; const effectiveHeight = height === 'auto' ? 'auto' : (parseInt(height) ? `${parseInt(height)}px` : '300px'); const effectiveWidth = width === 'auto' ? 'auto' : (parseInt(width) || (typeof width === 'string' && width.endsWith('%')) ? width : '100%'); const renderVideo = () => { if (!src) return <div className="p-4 text-center text-slate-500 aspect-video flex items-center justify-center bg-slate-100 rounded-md border border-slate-200">Video source not configured.</div>; switch (videoType) { case 'youtube': return <iframe src={getYouTubeEmbedUrl(src)} style={{width: effectiveWidth, height: effectiveHeight}} frameBorder="0" allow="autoplay; fullscreen; picture-in-picture" allowFullScreen title="YouTube Video" className="block mx-auto rounded-md"></iframe>; case 'vimeo': return <iframe src={getVimeoEmbedUrl(src)} style={{width: effectiveWidth, height: effectiveHeight}} frameBorder="0" allow="autoplay; fullscreen; picture-in-picture" allowFullScreen title="Vimeo Video" className="block mx-auto rounded-md"></iframe>; case 'mp4': default: return <video src={src} style={{width: effectiveWidth, height: effectiveHeight}} controls={controls} autoPlay={autoplay} loop={loop} muted={muted} playsInline className="block mx-auto bg-black rounded-md"></video>; } }; return (<div className={`p-1 ${!isPreviewMode ? `rounded-lg ${isSelected ? 'ring-2 ring-cyan-500 ring-offset-1' : 'hover:ring-1 hover:ring-cyan-300/70'}` : ''}`}>{renderVideo()}</div>); }
function InnerSectionComponentDisplay({ sectionData, onOpenStructureModal, onSelect, isSelected, onUpdateProps, onDelete, selectedItemId, isPreviewMode }) { const hasColumns = sectionData.columns && sectionData.columns.length > 0; const ownPath = sectionData.path; if (!hasColumns) { return ( <div onClick={(e) => { if (!isPreviewMode) { e.stopPropagation(); onSelect(sectionData.id, 'element', ownPath); } }} className={`p-4 min-h-[80px] flex flex-col items-center justify-center ${!isPreviewMode ? `rounded-lg border-2 border-dashed ${isSelected ? 'border-cyan-500 bg-cyan-50/80' : 'border-slate-300 bg-slate-100/80 hover:border-cyan-400 hover:bg-cyan-50/50'} cursor-pointer transition-all` : ''}`}> <LucideIcons.Rows3 className="h-8 w-8 text-slate-400 mb-2" /> {!isPreviewMode && <button onClick={(e) => { e.stopPropagation(); onOpenStructureModal(ownPath, 'innerSection'); }} className="px-2.5 py-1 bg-cyan-500 text-white text-xs font-medium rounded-md hover:bg-cyan-600 transition-colors">Set Inner Structure</button>} </div> ); } return ( <div onClick={(e) => { if (!isPreviewMode) { e.stopPropagation(); onSelect(sectionData.id, 'element', ownPath); } }} className={`p-1 ${!isPreviewMode ? `border rounded-lg ${isSelected ? 'border-cyan-500 bg-cyan-50/50' : 'border-slate-200 hover:border-cyan-300/70'}` : ''}`}> <div className="flex flex-wrap -m-0.5"> {sectionData.columns.map((col, colIdx) => (<ColumnComponent key={col.id} parentPath={ownPath} columnData={col} columnIndex={colIdx} onUpdateProps={onUpdateProps} onDelete={onDelete} onSelect={onSelect} selectedItemId={selectedItemId} onOpenStructureModal={onOpenStructureModal} isInner={true} isPreviewMode={isPreviewMode} />))} </div> </div> ); }

function NavbarElement({ logoType = 'text', logoText = 'MySite', logoSrc = img, links = [], rightContentType = 'none', backgroundColor = '#ffffff', textColor = '#334155', linkColor = '#06b6d4', isSelected, isPreviewMode, onUpdate, onNavigate, onSelect, onDelete, path }) {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const navStyle = { backgroundColor }; const textStyle = { color: textColor }; const linkStyle = { color: linkColor };
  const handleLinkClick = (e, linkUrl) => { if (isMobileMenuOpen) setIsMobileMenuOpen(false); if (!isPreviewMode) { e.preventDefault(); return; } if (linkUrl && linkUrl.startsWith('/')) { e.preventDefault(); if (onNavigate) onNavigate(linkUrl.substring(1)); } else if (linkUrl === '#') { e.preventDefault(); } };
  const toggleMobileMenu = () => { setIsMobileMenuOpen(!isMobileMenuOpen); };
  const handleClick = (e) => { if(!isPreviewMode && onSelect) { e.stopPropagation(); onSelect(); }};

  return (
    <div onClick={handleClick} className={`p-1 relative group ${!isPreviewMode && isSelected ? 'ring-2 ring-cyan-500 ring-offset-1 rounded-lg' : (!isPreviewMode && path ? 'hover:ring-1 hover:ring-cyan-300/70 rounded-lg' : '')}`}>
      <nav style={navStyle} className="relative px-4 sm:px-6 py-3 shadow-md rounded-md">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            {logoType === 'image' && logoSrc ? ( <img src={logoSrc} alt={logoText || 'Logo'} className="h-8 sm:h-9 w-auto mr-3 rounded-sm object-contain" /> ) : ( <a href={isPreviewMode ? (links.find(l => l.text.toLowerCase() === 'home')?.url || "/home") : "#"} onClick={(e) => handleLinkClick(e, links.find(l => l.text.toLowerCase() === 'home')?.url || "/home")} style={textStyle} className="text-xl lg:text-2xl font-bold hover:opacity-80 transition-opacity">{logoText}</a> )}
          </div>
          <div className="hidden md:flex items-center space-x-5 lg:space-x-6">
            {links.map((link, index) => ( <a key={link.id || index} href={link.url} onClick={(e) => handleLinkClick(e, link.url)} target={isPreviewMode && link.target === '_blank' && link.url && !link.url.startsWith('/') ? '_blank' : '_self'} rel={isPreviewMode && link.target === '_blank' && link.url && !link.url.startsWith('/') ? 'noopener noreferrer' : ''} style={linkStyle} className="text-sm font-medium hover:opacity-80 transition-opacity">{link.text}</a> ))}
          </div>
          <div className="hidden md:flex items-center">
            {rightContentType === 'userIcon' && <LucideIcons.CircleUserRound style={linkStyle} className="h-6 w-6 ml-4" />}
            {rightContentType === 'searchIcon' && <LucideIcons.Search style={linkStyle} className="h-5 w-5 ml-4" />}
          </div>
          <div className="md:hidden flex items-center">
            {rightContentType === 'userIcon' && <LucideIcons.CircleUserRound style={linkStyle} className="h-6 w-6 mr-3" />}
            {rightContentType === 'searchIcon' && <LucideIcons.Search style={linkStyle} className="h-5 w-5 mr-3" />}
            <button onClick={toggleMobileMenu} style={linkStyle} aria-label="Toggle menu">
              {isMobileMenuOpen ? <LucideIcons.X className="h-6 w-6" /> : <LucideIcons.Menu className="h-6 w-6" />}
            </button>
          </div>
        </div>
        {isMobileMenuOpen && (
          <div className="md:hidden absolute top-full left-0 right-0 z-50 mt-1 rounded-b-md shadow-lg transition transform origin-top animate-fadeInDown" style={navStyle} >
            <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
              {links.map((link, index) => ( <a key={link.id || index} href={link.url} onClick={(e) => handleLinkClick(e, link.url)} target={isPreviewMode && link.target === '_blank' && link.url && !link.url.startsWith('/') ? '_blank' : '_self'} rel={isPreviewMode && link.target === '_blank' && link.url && !link.url.startsWith('/') ? 'noopener noreferrer' : ''} style={linkStyle} className="block px-3 py-2 rounded-md text-base font-medium hover:bg-white/10 hover:opacity-80 transition-colors" >{link.text}</a> ))}
            </div>
          </div>
        )}
        {!isPreviewMode && links.length === 0 && <div className="hidden md:block text-xs text-slate-400 mt-2 text-center">Navbar: Edit to add links</div>}
      </nav>
      {!isPreviewMode && isSelected && onDelete && (
         <button onClick={(e) => { e.stopPropagation(); onDelete(); }} title="Remove Global Navbar" className="absolute -top-2 -right-2 p-1 bg-red-500 text-white rounded-full hover:bg-red-600 hover:scale-110 transition-all w-5.5 h-5.5 flex items-center justify-center shadow-md z-30 print-hidden"> <LucideIcons.X className="w-3 h-3" strokeWidth={3}/> </button>
      )}
    </div>
  );
}

function FooterElement({ copyrightText = `© ${new Date().getFullYear()} MySite. All rights reserved.`, links = [], backgroundColor = '#f1f5f9', textColor = '#64748b', linkColor = '#0891b2', isSelected, isPreviewMode, onUpdate, onNavigate, onSelect, onDelete, path }) {
  const footerStyle = { backgroundColor }; const textStyle = { color: textColor }; const linkStyle = { color: linkColor };
  const handleLinkClick = (e, linkUrl) => { if (!isPreviewMode) { e.preventDefault(); return; } if (linkUrl && linkUrl.startsWith('/')) { e.preventDefault(); if (onNavigate) onNavigate(linkUrl.substring(1)); } else if (linkUrl === '#') { e.preventDefault(); } };
  const handleClick = (e) => { if(!isPreviewMode && onSelect) { e.stopPropagation(); onSelect(); }};
  return (
    <div onClick={handleClick} className={`p-1 relative group ${!isPreviewMode && isSelected ? 'ring-2 ring-cyan-500 ring-offset-1 rounded-lg' : (!isPreviewMode && path ? 'hover:ring-1 hover:ring-cyan-300/70 rounded-lg' : '')}`}>
      <footer style={footerStyle} className="px-6 py-8 text-center border-t border-slate-200/80 rounded-md">
        <div className="max-w-5xl mx-auto">
          <div className="flex flex-col sm:flex-row justify-center items-center space-y-3 sm:space-y-0 sm:space-x-6 mb-4">
            {links.map((link, index) => ( <a key={link.id || index} href={link.url} onClick={(e) => handleLinkClick(e, link.url)} target={isPreviewMode && link.target === '_blank' && link.url && !link.url.startsWith('/') ? '_blank' : '_self'} rel={isPreviewMode && link.target === '_blank' && link.url && !link.url.startsWith('/') ? 'noopener noreferrer' : ''} style={linkStyle} className="text-xs sm:text-sm hover:underline">{link.text}</a> ))}
          </div>
          <p style={textStyle} className="text-xs sm:text-sm">{copyrightText}</p>
        </div>
      </footer>
      {!isPreviewMode && isSelected && onDelete && (
         <button onClick={(e) => { e.stopPropagation(); onDelete(); }} title="Remove Global Footer" className="absolute -top-2 -right-2 p-1 bg-red-500 text-white rounded-full hover:bg-red-600 hover:scale-110 transition-all w-5.5 h-5.5 flex items-center justify-center shadow-md z-30 print-hidden"> <LucideIcons.X className="w-3 h-3" strokeWidth={3}/> </button>
      )}
    </div>
  );
}

const ALL_ELEMENT_TYPES = { Header, TextBlock, ImageElement, ButtonElement, Divider, Spacer, IconElement, GoogleMapsPlaceholder, VideoElement, InnerSectionComponentDisplay, NavbarElement, FooterElement };
const AVAILABLE_ELEMENTS_CONFIG = [ { id: 'header', name: 'Header', component: 'Header', defaultProps: { text: "Editable Header", sizeClass: '', textAlign: 'text-left', textColor: '#334155' } }, { id: 'textBlock', name: 'Paragraph', component: 'TextBlock', defaultProps: { text: "Editable text.", sizeClass: '', textAlign: 'text-left', textColor: '#475569' } }, { id: 'image', name: 'Image', component: 'ImageElement', defaultProps: { src: img , alt: "Placeholder Image", width: "100%", height: "auto" } }, { id: 'button', name: 'Button', component: 'ButtonElement', defaultProps: { buttonText: "Action Button", link: "#", sizeClass: 'text-sm', textAlign: 'text-center', backgroundColor: '#06b6d4', textColor: '#ffffff', borderRadius: '8px' } }, { id: 'divider', name: 'Divider', component: 'Divider', defaultProps: {} }, { id: 'spacer', name: 'Spacer', component: 'Spacer', defaultProps: { height: "25px" } }, { id: 'icon', name: 'Icon', component: 'IconElement', defaultProps: { iconName: "Star", size: "32px", color: "#0ea5e9" } }, { id: 'googleMaps', name: 'Google Maps', component: 'GoogleMapsPlaceholder', defaultProps: { address: "New York, NY", zoom: 14 } }, { id: 'video', name: 'Video', component: 'VideoElement', defaultProps: { videoType: 'mp4', src: 'https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4', width: "100%", height: "300px", controls: true, autoplay: false, loop: false, muted: true } }, { id: 'innerSection', name: 'Inner Section', component: 'InnerSectionComponentDisplay', defaultProps: {}, isContainer: true, hasOwnColumns: true }, { id: 'navbar', name: 'Navbar', component: 'NavbarElement', isGlobalOnly: true, defaultProps: { logoType: 'text', logoText: 'SiteName', links: [ {id: generateId('navlink'), text: 'Home', url: '/home', target: '_self'}, {id: generateId('navlink'), text: 'About', url: '/about', target: '_self'} ], rightContentType: 'userIcon', backgroundColor: '#FFFFFF', textColor: '#1e293b', linkColor: '#0891b2' } }, { id: 'footer', name: 'Footer', component: 'FooterElement', isGlobalOnly: true, defaultProps: { copyrightText: `© ${new Date().getFullYear()} Your Company. All rights reserved.`, links: [ {id: generateId('footerlink'), text: 'Privacy Policy', url: '/privacy', target: '_self'}, {id: generateId('footerlink'), text: 'Terms of Service', url: '/terms', target: '_self'} ], backgroundColor: '#f1f5f9', textColor: '#64748b', linkColor: '#0891b2' } }, ];
const elementIcons = { header: ( <LucideIcons.Heading1 /> ), textBlock: ( <LucideIcons.Baseline /> ), image: ( <LucideIcons.Image /> ), button: ( <LucideIcons.MousePointer /> ), divider: ( <LucideIcons.Minus /> ), spacer: (<LucideIcons.StretchVertical />), icon: (<LucideIcons.Star />), googleMaps: (<LucideIcons.MapPin />), video: (<LucideIcons.Youtube />), innerSection: (<LucideIcons.LayoutPanelLeft />), navbar: (<LucideIcons.Navigation />), footer: (<LucideIcons.PanelBottom />), default: ( <LucideIcons.Puzzle /> ) };
const PREDEFINED_STRUCTURES = [ { name: '1 Col', id: '1col', layout: [{ width: '100%' }] }, { name: '2 Cols (50/50)', id: '2col5050', layout: [{ width: '50%' }, { width: '50%' }] }, { name: '2 Cols (33/67)', id: '2col3367', layout: [{ width: '33.33%' }, { width: '66.67%' }] }, { name: '3 Cols', id: '3col33', layout: [{ width: '33.33%' }, { width: '33.33%' }, { width: '33.33%' }] }, { name: '4 Cols', id: '4col25', layout: [{ width: '25%' }, { width: '25%' }, { width: '25%' }, { width: '25%' }] }, { name: '1/4 + 3/4', id: '1434', layout: [{ width: '25%' }, { width: '75%' }] }, ];

function StructureSelectorModal({ isOpen, onClose, onSelectStructure, context }) { if (!isOpen) return null; return ( <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-[100] p-4 print-hidden"> <div className="bg-white p-5 sm:p-6 rounded-xl shadow-2xl max-w-lg w-full"> <div className="flex justify-between items-center mb-6"> <h3 className="text-xl font-semibold text-slate-800">Select Column Structure</h3> <button onClick={onClose} className="text-slate-400 hover:text-slate-600 transition-colors p-1 rounded-full hover:bg-slate-100"><LucideIcons.X className="w-5 h-5" /></button> </div> <div className="grid grid-cols-2 sm:grid-cols-3 gap-3"> {PREDEFINED_STRUCTURES.map(s => (<button key={s.id} onClick={() => { onSelectStructure(s.layout, context); onClose(); }} className="p-3 bg-slate-100 rounded-lg hover:bg-cyan-100 hover:ring-2 hover:ring-cyan-400 transition-all flex flex-col items-center justify-center aspect-[4/3] group focus:outline-none focus-visible:ring-2 focus-visible:ring-cyan-500"><div className="flex w-full h-8 mb-2 space-x-1 items-stretch">{s.layout.map((col, idx) => <div key={idx} className="bg-slate-400 group-hover:bg-cyan-400 rounded-sm transition-colors" style={{ flexBasis: col.width }}></div>)}</div><span className="text-xs text-slate-600 group-hover:text-cyan-700 text-center font-medium">{s.name}</span></button>))} </div> </div> </div> ); }
function ElementPaletteItem({ config }) { const { attributes, listeners, setNodeRef, isDragging, transform } = useDraggable({ id: `palette-${config.id}`, data: { type: 'paletteItem', config: config, }, }); const style = transform ? { transform: `translate3d(${transform.x}px, ${transform.y}px, 0)`, zIndex: 9999, opacity: isDragging ? 0.85 : 1, } : {}; let IconToShow = elementIcons[config.id] || elementIcons.default; if (!elementIcons[config.id]) { console.warn(`Icon key "${config.id}" not found in elementIcons. Using default.`); } if (!IconToShow) { IconToShow = <LucideIcons.HelpCircle className="w-7 h-7 text-red-500" />; console.error("Default icon also not found in elementIcons! This should not happen.");}  else { IconToShow = React.cloneElement(IconToShow, { className: "w-7 h-7" }); } if (isDragging) { return ( <div ref={setNodeRef} style={style} className="flex flex-col items-center justify-center p-2.5 text-center bg-cyan-100 rounded-xl shadow-xl ring-1 ring-cyan-400 opacity-90"> <div className="w-8 h-8 flex items-center justify-center text-cyan-600 mb-1.5">{IconToShow}</div> <span className="text-xs font-semibold text-cyan-800 leading-tight">{config.name}</span> </div> ); } return ( <div ref={setNodeRef} {...listeners} {...attributes} style={style} className="flex flex-col items-center justify-center p-2.5 text-center bg-slate-50 rounded-xl cursor-grab hover:bg-cyan-50 hover:shadow-lg hover:ring-1 hover:ring-cyan-300 transition-all group focus:outline-none focus-visible:ring-2 focus-visible:ring-cyan-500"> <div className="w-8 h-8 flex items-center justify-center text-slate-500 group-hover:text-cyan-600 mb-1.5 transition-colors">{IconToShow}</div> <span className="text-xs font-semibold text-slate-600 group-hover:text-cyan-700 leading-tight">{config.name}</span> </div> ); }
function PaletteItemDragOverlay({ config }) { let IconToShow = elementIcons[config.id] || elementIcons.default; if (!elementIcons[config.id]) { console.warn(`Icon key "${config.id}" not found in elementIcons for DragOverlay. Using default.`); } if (!IconToShow) { IconToShow = <LucideIcons.HelpCircle className="w-7 h-7 text-red-500" />; console.error("Default icon also not found for DragOverlay!");} else { IconToShow = React.cloneElement(IconToShow, { className: "w-7 h-7" }); } return ( <div className="flex flex-col items-center justify-center p-2.5 text-center bg-cyan-50 rounded-xl shadow-2xl ring-2 ring-cyan-500 opacity-95 cursor-grabbing"> <div className="w-8 h-8 flex items-center justify-center text-cyan-600 mb-1.5">{IconToShow}</div> <span className="text-xs font-semibold text-cyan-700 leading-tight">{config.name}</span> </div> ); }
function ElementPalette({ onAddTopLevelSection, pages, activePageId, onAddPage, onSelectPage }) { const [searchTerm, setSearchTerm] = useState(''); const filteredElements = useMemo(() => AVAILABLE_ELEMENTS_CONFIG.filter(el => el.name.toLowerCase().includes(searchTerm.toLowerCase())), [searchTerm]); const addSectionConfig = { id: 'addSection', name: 'Add New Section', component: '', isSpecial: true }; return ( <div className="w-72 bg-white p-4 border-r border-slate-200/70 shadow-xl flex-shrink-0 flex flex-col print-hidden"> <div className="mb-4 pb-3 border-b border-slate-200/90"> <div className="flex justify-between items-center mb-1.5"> <h3 className="text-sm font-semibold text-slate-700">Pages</h3> <button onClick={onAddPage} title="Add New Page" className="p-1 text-green-600 hover:text-green-700 rounded-md hover:bg-green-100 transition-colors"> <LucideIcons.FilePlus2 className="w-4 h-4"/> </button> </div> <ul className="space-y-1 max-h-40 overflow-y-auto scrollbar-thin scrollbar-thumb-slate-300 scrollbar-track-slate-100 scrollbar-thumb-rounded-full"> {Object.values(pages).map(page => ( <li key={page.id}> <button onClick={() => onSelectPage(page.id)} className={`w-full text-left px-3 py-2 text-xs rounded-lg transition-all duration-150 flex items-center justify-between ${activePageId === page.id ? 'bg-cyan-500 text-white font-semibold shadow-md' : 'text-slate-600 hover:bg-slate-100 hover:text-slate-900'}`}> <span>{page.name}</span> {activePageId === page.id && <LucideIcons.CheckCircle2 className="w-4 h-4 opacity-80" />} </button> </li> ))} </ul> </div> <input type="text" placeholder="Search elements..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="w-full px-3.5 py-2 mb-3 border border-slate-300 rounded-xl text-sm focus:ring-2 focus:ring-cyan-400 focus:border-cyan-400 transition-shadow shadow-sm placeholder-slate-400"/> <div className="grid grid-cols-2 gap-2.5 overflow-y-auto pr-1.5 -mr-2.5 flex-grow scrollbar-thin scrollbar-thumb-slate-300 scrollbar-track-slate-100 scrollbar-thumb-rounded-full"> <div onClick={onAddTopLevelSection} className="flex flex-col items-center justify-center p-2.5 text-center rounded-xl cursor-pointer transition-all group bg-cyan-500 hover:bg-cyan-600 border border-cyan-600 shadow-lg focus:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400 focus-visible:ring-offset-1"> <div className="w-8 h-8 flex items-center justify-center text-white mb-1.5"><LucideIcons.PlusSquare className="w-7 h-7"/></div> <span className="text-xs font-semibold text-white leading-tight">{addSectionConfig.name}</span> </div> {filteredElements.map((elConf) => <ElementPaletteItem key={elConf.id} config={elConf} />)} </div> </div> ); }
function DraggableCanvasElement({ elementData, onUpdateProps, onDelete, onSelect, isSelected, onOpenStructureModal, parentColumnId, isPreviewMode, onNavigate }) { const config = AVAILABLE_ELEMENTS_CONFIG.find(c => c.id === elementData.type); if (!config && !isPreviewMode) { return <div className="text-red-500 p-2 border border-red-500 rounded-md">Error: Config not found for element type '{elementData.type}'.</div>; } else if(!config && isPreviewMode) { return null; } const ComponentToRender = ALL_ELEMENT_TYPES[config.component]; if (!ComponentToRender && !isPreviewMode) { return <div className="text-red-500 p-2 border border-red-500 rounded-md">Error: Component '{config.component}' definition missing.</div>; } else if(!ComponentToRender && isPreviewMode) { return null; } const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({ id: elementData.id, data: { type: 'canvasElement', elementId: elementData.id, parentColumnId: parentColumnId, elementType: elementData.type, elementData: elementData }, disabled: isPreviewMode, }); const style = { transform: CSS.Transform.toString(transform), transition, opacity: isDragging && !isPreviewMode ? 0.5 : 1, zIndex: isDragging && !isPreviewMode ? 100 : 'auto', }; const handleUpdate = (newProps) => { if(!isPreviewMode) onUpdateProps(elementData.path, newProps); }; const handleClick = (e) => { if(!isPreviewMode) {e.stopPropagation(); onSelect(elementData.id, 'element', elementData.path); }}; return ( <div ref={setNodeRef} style={style} onClick={handleClick} className={`relative group my-1.5 transition-all duration-150 ease-in-out ${!isPreviewMode ? `${isDragging ? 'bg-cyan-50/80 shadow-xl ring-2 ring-cyan-400 scale-[1.01]' : ''} ${isSelected ? 'outline-none ring-2 ring-cyan-500 ring-offset-2 rounded-lg' : 'hover:shadow-md hover:ring-1 hover:ring-cyan-300/80 rounded-lg'}` : ''}`}> {!isPreviewMode && ( <div {...attributes} {...listeners} title="Drag element"  className="absolute top-1/2 -left-3.5 transform -translate-y-1/2 p-1.5 cursor-grab bg-white hover:bg-cyan-500 text-slate-500 hover:text-white rounded-full shadow-lg border border-slate-300 hover:border-cyan-500 opacity-0 group-hover:opacity-100 group-focus-within:opacity-100 focus:opacity-100 z-20 print-hidden transition-opacity"> <LucideIcons.GripVertical className="w-4 h-4" /> </div> )} <div className={isPreviewMode || (!isPreviewMode && isSelected) ? "" : "pointer-events-none"}>  <ComponentToRender {...elementData.props} sectionData={elementData} onUpdate={handleUpdate} elementId={elementData.id} isSelected={!isPreviewMode && isSelected} onOpenStructureModal={onOpenStructureModal} selectedItemId={!isPreviewMode && isSelected ? elementData.id : null} isPreviewMode={isPreviewMode} onNavigate={onNavigate}/> </div> {!isPreviewMode && isSelected && ( <button onClick={(e) => { e.stopPropagation(); onDelete(elementData.path); }} title="Delete element" className="absolute -top-2 -right-2 p-1 bg-red-500 text-white rounded-full hover:bg-red-600 hover:scale-110 transition-all w-5.5 h-5.5 flex items-center justify-center shadow-md z-20 print-hidden"> <LucideIcons.X className="w-3 h-3" strokeWidth={3}/> </button> )} </div> ); }
function ColumnComponent({ parentPath, columnData, columnIndex, onUpdateProps, onDelete, onSelect, selectedItemId, onOpenStructureModal, isInner = false, isPreviewMode, onNavigate }) { const columnPath = `${parentPath}.${isInner ? 'columns' : 'columns'}[${columnIndex}]`; const isSelected = selectedItemId === columnData.id; const handleClick = (e) => { if(!isPreviewMode) {e.stopPropagation(); onSelect(columnData.id, 'column', columnPath);} }; const { setNodeRef: setDroppableRef, isOver } = useDroppable({ id: `col-${columnData.id}`,  data: { type: 'column', columnId: columnData.id, path: columnPath,  accepts: ['paletteItem', 'canvasElement']  }, disabled: isPreviewMode, }); const elementIds = useMemo(() => columnData.elements.map(el => el.id), [columnData.elements]); return ( <div onClick={handleClick} style={{ flexBasis: columnData.props.width || '100%' }} className={`p-1 md:p-1.5 flex-shrink-0 transition-all ${!isPreviewMode && isSelected ? 'outline outline-2 outline-offset-1 outline-blue-500 rounded-lg bg-blue-50/60' : (!isPreviewMode ? 'hover:outline hover:outline-1 hover:outline-offset-0 hover:outline-blue-300/70 rounded-lg' : '')}`}> <SortableContext items={elementIds} strategy={verticalListSortingStrategy} disabled={isPreviewMode}> <div ref={setDroppableRef} className={`min-h-[80px] p-2 rounded-lg transition-all ${!isPreviewMode ? `border ${isOver ? 'bg-cyan-100/90 border-cyan-400 border-solid ring-1 ring-cyan-400' : 'bg-slate-100/60 border-slate-200/90'} ${columnData.elements.length === 0 && !isOver ? 'border-dashed flex items-center justify-center text-slate-400/80 text-xs font-medium' : ''}` : '' }`}> {!isPreviewMode && columnData.elements.length === 0 && !isOver ? 'Drop Element Here' : null} {columnData.elements.map((el, elIdx) => ( <DraggableCanvasElement  key={el.id}  elementData={{...el, path: `${columnPath}.elements[${elIdx}]`}}  onUpdateProps={onUpdateProps}  onDelete={onDelete}  onSelect={onSelect}  isSelected={selectedItemId === el.id}  onOpenStructureModal={onOpenStructureModal} parentColumnId={columnData.id}  isPreviewMode={isPreviewMode} onNavigate={onNavigate} /> ))} </div> </SortableContext> </div> ); }
function SectionComponent({ sectionData, sectionIndex, onUpdateProps, onDelete, onSelect, selectedItemId, onOpenStructureModal, isPreviewMode, onNavigate }) { const sectionPath = `sections[${sectionIndex}]`; const isSelected = selectedItemId === sectionData.id; const handleClick = (e) => { if(!isPreviewMode) onSelect(sectionData.id, 'section', sectionPath);}; const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({ id: sectionData.id, data: { type: 'section', sectionId: sectionData.id, path: sectionPath, sectionData: sectionData }, disabled: isPreviewMode, }); const sortableStyle = { transform: CSS.Transform.toString(transform), transition, opacity: isDragging && !isPreviewMode ? 0.75 : 1, zIndex: isDragging && !isPreviewMode ? 200 : 'auto', }; const sectionProps = sectionData.props || {}; const effectiveBgStyle = { ...sortableStyle }; if (sectionProps.backgroundType === 'color' && sectionProps.backgroundColor) { effectiveBgStyle.backgroundColor = sectionProps.backgroundColor; } else if (sectionProps.backgroundType !== 'image' && sectionProps.backgroundType !== 'video') { if (!isPreviewMode) effectiveBgStyle.backgroundColor = 'white'; } const getSectionBaseBgClass = () => { const editModeBase = 'shadow-lg hover:shadow-xl rounded-xl my-2.5'; if (isPreviewMode) { return (sectionProps.backgroundType === 'image' || sectionProps.backgroundType === 'video') ? '' : 'bg-transparent'; } else { if (isDragging) { return `bg-cyan-50/80 shadow-2xl ring-2 ring-cyan-400 rounded-xl`; } const noMediaBackground = (sectionProps.backgroundType !== 'image' && sectionProps.backgroundType !== 'video'); return `${noMediaBackground ? 'bg-white' : ''} ${editModeBase}`; } }; const sectionRootClasses = [ 'relative', 'group', 'transition-all duration-200 ease-in-out', getSectionBaseBgClass(), (!isPreviewMode && isSelected ? 'outline-none ring-2 ring-green-500 ring-offset-2' : '') ].join(' ').replace(/\s+/g, ' ').trim(); return ( <div ref={setNodeRef} style={effectiveBgStyle} onClick={handleClick} className={sectionRootClasses}> {sectionProps.backgroundType === 'image' && sectionProps.backgroundImageSrc && ( <div className="absolute inset-0 bg-cover bg-center -z-20 rounded-xl" style={{ backgroundImage: `url("${sectionProps.backgroundImageSrc}")` }}></div> )} {sectionProps.backgroundType === 'video' && sectionProps.backgroundVideoSrc && ( <video className="absolute inset-0 w-full h-full object-cover -z-20 rounded-xl" src={sectionProps.backgroundVideoSrc} autoPlay={sectionProps.backgroundVideoAutoplay !== false} loop={sectionProps.backgroundVideoLoop !== false} muted={sectionProps.backgroundVideoMuted !== false} playsInline key={sectionProps.backgroundVideoSrc + (sectionProps.backgroundVideoAutoplay ? '1':'0')}></video> )} {(sectionProps.backgroundType === 'image' || sectionProps.backgroundType === 'video') && sectionProps.backgroundOverlayColor && (typeof sectionProps.backgroundOverlayOpacity === 'number' && sectionProps.backgroundOverlayOpacity > 0) && ( <div className="absolute inset-0 -z-10 rounded-xl" style={{ backgroundColor: sectionProps.backgroundOverlayColor, opacity: sectionProps.backgroundOverlayOpacity }}></div> )} {!isPreviewMode && ( <div {...attributes} {...listeners} title="Drag section" className="absolute top-1.5 -left-3 transform p-1.5 cursor-grab bg-white hover:bg-green-500 text-slate-500 hover:text-white rounded-full shadow-lg border border-slate-300 hover:border-green-500 opacity-0 group-hover:opacity-100 group-focus-within:opacity-100 focus:opacity-100 z-30 print-hidden transition-opacity"> <LucideIcons.Move className="w-4 h-4" /> </div> )} {!isPreviewMode && isSelected && ( <button onClick={(e) => { e.stopPropagation(); onDelete(sectionPath); }} title="Delete section" className="absolute -top-2 -right-2 p-1 bg-red-500 text-white rounded-full hover:bg-red-600 hover:scale-110 transition-all w-5.5 h-5.5 flex items-center justify-center shadow-md z-30 print-hidden"> <LucideIcons.Trash2 className="w-3 h-3" strokeWidth={2.5} /> </button> )} <div className="flex flex-wrap -m-1 relative z-0 p-2 sm:p-2.5"> {sectionData.columns.map((col, colIdx) => ( <ColumnComponent key={col.id} parentPath={sectionPath} columnData={col} columnIndex={colIdx} onUpdateProps={onUpdateProps} onDelete={onDelete} onSelect={onSelect} selectedItemId={selectedItemId} onOpenStructureModal={onOpenStructureModal} isPreviewMode={isPreviewMode} onNavigate={onNavigate} /> ))} </div> </div> ); }
function LinkManager({ links, onUpdateLinks, elementId, pages, linkTypeLabel = "Link" }) { const [localLinks, setLocalLinks] = useState(links || []); useEffect(() => { setLocalLinks(links || []); }, [links]); const handleLinkChange = (index, field, value) => { const newLinks = [...localLinks]; newLinks[index] = { ...newLinks[index], [field]: value }; if(field === 'url' && value.startsWith('/')) { newLinks[index].isInternal = true; } else if (field === 'url') { newLinks[index].isInternal = false; } setLocalLinks(newLinks); onUpdateLinks(newLinks); }; const addLink = () => { const newLink = { id: generateId('link'), text: `New ${linkTypeLabel}`, url: '#', target: '_self', isInternal: false }; const newLinks = [...localLinks, newLink]; setLocalLinks(newLinks); onUpdateLinks(newLinks); }; const removeLink = (index) => { const newLinks = localLinks.filter((_, i) => i !== index); setLocalLinks(newLinks); onUpdateLinks(newLinks); };
  const pageOptions = [{label: "External URL", value: "external"}, ...Object.values(pages).map(p => ({label: `${p.name} (/${p.id})`, value: `internal:${p.id}`}))];
  return ( <div className="space-y-2.5"> {localLinks.map((link, index) => ( <div key={link.id || index} className="p-2.5 border border-slate-200 rounded-lg space-y-2 bg-slate-50/70"> <input type="text" placeholder={`${linkTypeLabel} Text`} value={link.text} onChange={(e) => handleLinkChange(index, 'text', e.target.value)} className="w-full px-2 py-1.5 border border-slate-300 rounded-md text-xs focus:ring-cyan-500 focus:border-cyan-500"/> <div> <input type="text" placeholder="URL (e.g. /page-slug or https://...)" value={link.url} onChange={(e) => handleLinkChange(index, 'url', e.target.value)} className="w-full px-2 py-1.5 border border-slate-300 rounded-md text-xs focus:ring-cyan-500 focus:border-cyan-500 mb-1"/>
  <CustomDropdown options={pageOptions} value={link.url && link.url.startsWith('/') ? `internal:${link.url.substring(1)}` : 'external'} onChange={(val) => { if(val.startsWith('internal:')) { handleLinkChange(index, 'url', `/${val.split(':')[1]}`); } else { handleLinkChange(index, 'url', (link.url && link.url.startsWith('/')) ? '#' : link.url ); } }} idSuffix={`link-${index}`} />
  </div> <div className="flex items-center justify-between pt-1"> <div className="flex items-center space-x-1.5"> <input type="checkbox" id={`${elementId}-link-${index}-target`} checked={link.target === '_blank'} onChange={(e) => handleLinkChange(index, 'target', e.target.checked ? '_blank' : '_self')} className="h-3 w-3 rounded border-slate-300 text-cyan-500 focus:ring-cyan-400"/> <label htmlFor={`${elementId}-link-${index}-target`} className="text-[10px] text-slate-600">Open in new tab</label> </div> <button onClick={() => removeLink(index)} className="text-red-500 hover:text-red-700 p-0.5 rounded-full hover:bg-red-100"> <LucideIcons.XCircle className="w-3.5 h-3.5"/> </button> </div> </div> ))} <button onClick={addLink} className="w-full mt-1.5 px-2.5 py-1.5 bg-cyan-100 text-cyan-700 text-xs font-medium rounded-md hover:bg-cyan-200 transition-colors flex items-center justify-center space-x-1.5"> <LucideIcons.PlusCircle className="w-3.5 h-3.5"/> <span>Add {linkTypeLabel}</span> </button> </div> ); }
function PropertiesPanel({ selectedItemData, onUpdateSelectedProps, onClosePanel, pages, onDeleteGlobalElement }) { const elementFileInputRef = useRef(null); const sectionBgImageInputRef = useRef(null); const sectionBgVideoInputRef = useRef(null); const navbarLogoInputRef = useRef(null); const footerLogoInputRef = useRef(null); if (!selectedItemData) { return ( <div className="w-72 bg-white p-4 border-l border-slate-200/80 shadow-xl flex-shrink-0 print-hidden flex flex-col"> <h2 className="text-lg font-semibold mb-3 text-slate-800">Properties</h2> <div className="flex-grow flex flex-col items-center justify-center text-center"> <LucideIcons.SlidersHorizontal className="w-16 h-16 text-slate-300 mb-3" /> <p className="text-slate-500 text-sm">Select an item on the canvas to view its properties.</p> </div> </div> ); } const { id, type, path, props, itemType: globalItemType } = selectedItemData; const elementType = globalItemType || props.elementType || (type === 'element' ? props.type : null); const isGlobalContext = type === 'globalElement'; const handlePropChange = (propName, value) => { let newPropsToUpdate = { [propName]: value }; if (type === 'section' && propName === 'backgroundType') { if (value === 'color') { newPropsToUpdate.backgroundColor = props.backgroundColor || '#FFFFFF'; newPropsToUpdate.backgroundImageSrc = ''; newPropsToUpdate.backgroundVideoSrc = ''; } else if (value === 'image') { newPropsToUpdate.backgroundImageSrc = props.backgroundImageSrc || img; newPropsToUpdate.backgroundColor = ''; newPropsToUpdate.backgroundVideoSrc = ''; } else if (value === 'video') { newPropsToUpdate.backgroundVideoSrc = props.backgroundVideoSrc || 'https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4'; newPropsToUpdate.backgroundColor = ''; newPropsToUpdate.backgroundImageSrc = ''; } else {  newPropsToUpdate.backgroundColor = ''; newPropsToUpdate.backgroundImageSrc = ''; newPropsToUpdate.backgroundVideoSrc = ''; } } onUpdateSelectedProps(path, newPropsToUpdate); }; const handleGenericLogoFileChange = (e, logoSrcPropName) => { const file = e.target.files[0]; if (file) { const reader = new FileReader(); reader.onloadend = () => { handlePropChange(logoSrcPropName, reader.result); }; reader.readAsDataURL(file); } }; const handleSectionBgImageFileChange = (e) => { const file = e.target.files[0]; if (file) { const reader = new FileReader(); reader.onloadend = () => { onUpdateSelectedProps(path, { backgroundImageSrc: reader.result, backgroundType: 'image', backgroundColor: '', backgroundVideoSrc: '', }); }; reader.readAsDataURL(file); } }; const handleSectionBgVideoFileChange = (e) => { const file = e.target.files[0]; if (file) { const reader = new FileReader(); reader.onloadend = () => { onUpdateSelectedProps(path, { backgroundVideoSrc: reader.result, backgroundType: 'video', backgroundColor: '', backgroundImageSrc: '', }); }; reader.readAsDataURL(file); } }; const renderInput = (key, value, propType, placeholder = '') => { const label = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()); const inputId = `${id}-${key}`; if (typeof value === 'boolean' && propType !== 'checkboxSpecial') { return ( <div key={key} className="flex items-center justify-between"> <label htmlFor={inputId} className="text-xs font-medium text-slate-700">{label}</label> <label htmlFor={inputId} className="relative inline-flex items-center cursor-pointer"> <input type="checkbox" checked={value} onChange={(e) => handlePropChange(key, e.target.checked)} id={inputId} className="sr-only peer" /> <div className="w-9 h-5 bg-slate-200 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-cyan-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-cyan-500"></div> </label> </div> ); } if (propType === 'checkboxSpecial') { return <input type="checkbox" checked={value} onChange={(e) => handlePropChange(key, e.target.checked)} id={inputId} className="h-3.5 w-3.5 rounded border-slate-300 text-cyan-500 focus:ring-cyan-400"/>; } return ( <div key={key}> <label htmlFor={inputId} className="block text-xs font-medium text-slate-700 mb-1">{label}</label> <input type={typeof value === 'number' ? 'number' : 'text'} id={inputId} value={value} placeholder={placeholder} onChange={(e) => handlePropChange(key, typeof value === 'number' ? parseFloat(e.target.value) : e.target.value)} className="w-full px-2.5 py-1.5 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-cyan-400 focus:border-cyan-400 transition-shadow shadow-sm"/> </div> ); }; const renderColorInput = (key, value, labelText) => ( <div key={key}> <label className="block text-xs font-medium text-slate-700 mb-1">{labelText || key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}</label> <input type="color" value={value || '#000000'} onChange={(e) => handlePropChange(key, e.target.value)} className="w-full p-0 h-9 border border-slate-300 rounded-lg shadow-sm cursor-pointer"/> </div> );
  const renderCustomDropdown = (key, value, options, labelText) => ( <CustomDropdown label={labelText || key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())} options={options} value={value || ''} onChange={(val) => handlePropChange(key, val)} idSuffix={key} /> );
  const renderTextAlignButtons = () => ( <div> <label className="block text-xs font-medium text-slate-700 mb-1.5">Text Align</label> <div className="flex space-x-1.5"> {textAlignOptions.map(opt => ( <button key={opt.value} title={opt.label} onClick={() => handlePropChange('textAlign', opt.value)} className={`flex-1 p-2 flex items-center justify-center rounded-lg text-sm border transition-colors ${props.textAlign === opt.value ? 'bg-cyan-500 text-white border-cyan-500 shadow-md' : 'bg-slate-100 hover:bg-slate-200 border-slate-300 text-slate-600'}`}> {React.cloneElement(opt.icon, {className: "w-5 h-5"})} </button> ))} </div> </div> ); const renderFileUploadButton = (ref, onChange, text, accept) => ( <> <button onClick={() => ref.current?.click()} className="w-full px-3 py-2 bg-cyan-500 text-white rounded-lg hover:bg-cyan-600 text-sm font-medium transition-colors shadow-md">{text}</button> <input type="file" accept={accept} ref={ref} className="hidden" onChange={onChange} /> </> );
  const panelTitle = isGlobalContext ? `Global ${elementType.charAt(0).toUpperCase() + elementType.slice(1)}` : (type === 'element' ? (AVAILABLE_ELEMENTS_CONFIG.find(el => el.id === elementType)?.name || elementType) : type);
  return ( <div className="w-72 bg-white p-4 border-l border-slate-200/80 shadow-xl flex-shrink-0 flex flex-col print-hidden"> <div className="flex justify-between items-center mb-4 pb-3 border-b border-slate-200/90"> <h2 className="text-lg font-semibold text-slate-800 capitalize">{panelTitle} Settings</h2> <button onClick={onClosePanel} className="text-slate-400 hover:text-slate-600 transition-colors p-1 rounded-full hover:bg-slate-100"><LucideIcons.X className="w-5 h-5" /></button> </div> <div className="overflow-y-auto flex-grow scrollbar-thin scrollbar-thumb-slate-300 scrollbar-track-slate-100 scrollbar-thumb-rounded-full text-sm space-y-5 pr-1 -mr-2"> {type === 'section' && (<details open className="space-y-3 prop-section"><summary className="text-xs font-semibold text-slate-500 uppercase cursor-pointer hover:text-cyan-600 mb-2 py-1">Background</summary> <div className="pl-2 space-y-3">{renderCustomDropdown('backgroundType', props.backgroundType, [ {label: 'None', value: 'none'}, {label: 'Color', value: 'color'}, {label: 'Image', value: 'image'}, {label: 'Video', value: 'video'} ], 'Type')} {props.backgroundType === 'color' && renderColorInput('backgroundColor', props.backgroundColor, 'Color')} {props.backgroundType === 'image' && (<div className="space-y-2">{renderFileUploadButton(sectionBgImageInputRef, handleSectionBgImageFileChange, 'Upload Background Image', 'image/*')}{renderInput('backgroundImageSrc', props.backgroundImageSrc || '', 'text', 'Image URL')}</div>)} {props.backgroundType === 'video' && (<div className="space-y-2">{renderFileUploadButton(sectionBgVideoInputRef, handleSectionBgVideoFileChange, 'Upload Background Video', 'video/*')}{renderInput('backgroundVideoSrc', props.backgroundVideoSrc || '', 'text', 'Video URL')} <div className="flex items-center space-x-2">{renderInput('backgroundVideoAutoplay', props.backgroundVideoAutoplay !== false, 'checkboxSpecial')} <label htmlFor={`${id}-backgroundVideoAutoplay`} className="text-xs text-slate-700">Autoplay</label></div> <div className="flex items-center space-x-2">{renderInput('backgroundVideoLoop', props.backgroundVideoLoop !== false, 'checkboxSpecial')} <label htmlFor={`${id}-backgroundVideoLoop`} className="text-xs text-slate-700">Loop</label></div> <div className="flex items-center space-x-2">{renderInput('backgroundVideoMuted', props.backgroundVideoMuted !== false, 'checkboxSpecial')} <label htmlFor={`${id}-backgroundVideoMuted`} className="text-xs text-slate-700">Muted</label></div></div>)}{(props.backgroundType === 'image' || props.backgroundType === 'video') && (props.backgroundImageSrc || props.backgroundVideoSrc) && (<div className="space-y-2 pt-3 border-t border-slate-200/70 mt-3">{renderColorInput('backgroundOverlayColor', props.backgroundOverlayColor, 'Overlay Color')}<div><label className="block text-xs font-medium text-slate-700 mb-1">Overlay Opacity ({((props.backgroundOverlayOpacity || 0) * 100).toFixed(0)}%)</label><input type="range" min="0" max="1" step="0.01" value={props.backgroundOverlayOpacity || 0} onChange={(e) => handlePropChange('backgroundOverlayOpacity', parseFloat(e.target.value))} className="w-full h-2.5 bg-slate-200 rounded-lg appearance-none cursor-pointer accent-cyan-500"/></div></div>)}</div></details>)} {elementType === 'button' && (<details open className="space-y-3 prop-section"><summary className="text-xs font-semibold text-slate-500 uppercase cursor-pointer hover:text-cyan-600 mb-2 py-1">Button Settings</summary><div className="pl-2 space-y-3">{renderInput('link', props.link || '#', 'text', 'Link URL (e.g. /page-slug or https://...)')}{renderColorInput('backgroundColor', props.backgroundColor, 'Background Color')}{renderColorInput('textColor', props.textColor, 'Text Color')}{renderInput('borderRadius', props.borderRadius || '8px', 'text', 'e.g., 8px or 0.5rem')}</div></details>)} {(elementType === 'header' || elementType === 'textBlock' || elementType === 'button') && (<details open className="space-y-3 prop-section"><summary className="text-xs font-semibold text-slate-500 uppercase cursor-pointer hover:text-cyan-600 mb-2 py-1">Typography</summary><div className="pl-2 space-y-3">{renderCustomDropdown('sizeClass', props.sizeClass, [{label: 'Default', value: ''}, ...textSizeOptions], 'Text Size')}{renderTextAlignButtons()}{(elementType === 'header' || elementType === 'textBlock') && renderColorInput('textColor', props.textColor, 'Text Color')}</div></details>)} {elementType === 'image' && (<details open className="space-y-3 prop-section"><summary className="text-xs font-semibold text-slate-500 uppercase cursor-pointer hover:text-cyan-600 mb-2 py-1">Image Settings</summary><div className="pl-2 space-y-3">{renderFileUploadButton(elementFileInputRef, (e)=>handleGenericLogoFileChange(e,'src'), 'Upload Image', 'image/*')}{renderInput('src', props.src || '', 'text', 'Image URL')}{renderInput('width', props.width || '', 'text', 'e.g. 100% or 250px')}{renderInput('height', props.height || '', 'text', 'e.g. auto or 150px')}{renderInput('alt', props.alt || '', 'text', 'Description')}</div></details>)} {elementType === 'video' && (<details open className="space-y-3 prop-section"><summary className="text-xs font-semibold text-slate-500 uppercase cursor-pointer hover:text-cyan-600 mb-2 py-1">Video Settings</summary><div className="pl-2 space-y-3">{renderCustomDropdown('videoType', props.videoType, [{label: 'MP4 URL', value: 'mp4'}, {label: 'YouTube ID', value: 'youtube'}, {label: 'Vimeo ID', value: 'vimeo'}], 'Source Type')}{renderInput('src', props.src || '', 'text', props.videoType === 'mp4' ? 'Video URL' : 'Video ID')}{renderInput('width', props.width || '100%', 'text')}{renderInput('height', props.height || '300px', 'text')}<div className="flex items-center space-x-2">{renderInput('controls', props.controls, 'checkboxSpecial')}<label htmlFor={`${id}-controls`} className="text-xs text-slate-700">Controls</label></div><div className="flex items-center space-x-2">{renderInput('autoplay', props.autoplay, 'checkboxSpecial')}<label htmlFor={`${id}-autoplay`} className="text-xs text-slate-700">Autoplay</label></div><div className="flex items-center space-x-2">{renderInput('loop', props.loop, 'checkboxSpecial')}<label htmlFor={`${id}-loop`} className="text-xs text-slate-700">Loop</label></div><div className="flex items-center space-x-2">{renderInput('muted', props.muted, 'checkboxSpecial')}<label htmlFor={`${id}-muted`} className="text-xs text-slate-700">Muted</label></div></div></details>)} {elementType === 'icon' && (<details open className="space-y-3 prop-section"><summary className="text-xs font-semibold text-slate-500 uppercase cursor-pointer hover:text-cyan-600 mb-2 py-1">Icon Settings</summary><div className="pl-2 space-y-3">{renderInput('iconName', props.iconName || '', 'text', 'e.g. Star, CircleUser (Lucide)')}{renderInput('size', props.size || '28px', 'text', 'e.g. 28px or 2em')}{renderColorInput('color', props.color, 'Icon Color')}</div></details>)} {elementType === 'navbar' && (<details open className="space-y-3 prop-section"><summary className="text-xs font-semibold text-slate-500 uppercase cursor-pointer hover:text-cyan-600 mb-2 py-1">Navbar Settings</summary><div className="pl-2 space-y-3">{renderCustomDropdown('logoType', props.logoType, [{label: 'Text', value: 'text'}, {label: 'Image', value: 'image'}], 'Logo Type')}{props.logoType === 'text' && renderInput('logoText', props.logoText, 'text', 'Logo Text')}{props.logoType === 'image' && (<>{renderFileUploadButton(navbarLogoInputRef, (e)=>handleGenericLogoFileChange(e, 'logoSrc'), 'Upload Logo', 'image/*')}{renderInput('logoSrc', props.logoSrc, 'text', 'Logo Image URL')}</>)}{renderColorInput('backgroundColor', props.backgroundColor, 'Background Color')}{renderColorInput('textColor', props.textColor, 'Main Text/Logo Color')}{renderColorInput('linkColor', props.linkColor, 'Link Color')}{renderCustomDropdown('rightContentType', props.rightContentType, [{label: 'None', value: 'none'}, {label: 'User Icon', value: 'userIcon'}, {label: 'Search Icon', value: 'searchIcon'}], 'Right Content')}<label className="block text-xs font-medium text-slate-700 mt-2 mb-1">Navigation Links</label><LinkManager links={props.links} onUpdateLinks={(updatedLinks) => handlePropChange('links', updatedLinks)} elementId={id} pages={pages} linkTypeLabel="Nav Link"/></div></details>)} {elementType === 'footer' && (<details open className="space-y-3 prop-section"><summary className="text-xs font-semibold text-slate-500 uppercase cursor-pointer hover:text-cyan-600 mb-2 py-1">Footer Settings</summary><div className="pl-2 space-y-3">{renderInput('copyrightText', props.copyrightText, 'text', 'Copyright Text')}{renderColorInput('backgroundColor', props.backgroundColor, 'Background Color')}{renderColorInput('textColor', props.textColor, 'Text Color')}{renderColorInput('linkColor', props.linkColor, 'Link Color')}<label className="block text-xs font-medium text-slate-700 mt-2 mb-1">Footer Links</label><LinkManager links={props.links} onUpdateLinks={(updatedLinks) => handlePropChange('links', updatedLinks)} elementId={id + '-pageLinks'} pages={pages} linkTypeLabel="Footer Link"/></div></details>)} <details className="prop-section"><summary className="text-xs font-semibold text-slate-500 uppercase cursor-pointer hover:text-cyan-600 mb-2 py-1">Other Properties</summary><div className="pl-2 space-y-3 mt-2">{Object.entries(props || {}).map(([key, value]) => { if (key === 'elementType' || key === 'sizeClass' || key === 'textAlign' || key === 'textColor' || (elementType === 'image' && ['src', 'width', 'height', 'alt'].includes(key)) || (elementType === 'video' && ['videoType', 'src', 'width', 'height', 'controls', 'autoplay', 'loop', 'muted'].includes(key)) || (elementType === 'icon' && ['iconName', 'size', 'color'].includes(key)) || (elementType === 'button' && ['link', 'backgroundColor', 'textColor', 'borderRadius'].includes(key)) || (elementType === 'navbar' && ['logoType', 'logoText', 'logoSrc', 'links', 'rightContentType', 'backgroundColor', 'textColor', 'linkColor'].includes(key)) || (elementType === 'footer' && ['copyrightText', 'links', 'socialLinks', 'backgroundColor', 'textColor', 'linkColor', 'socialIconColor'].includes(key)) || (type === 'section' && ['backgroundType', 'backgroundColor', 'backgroundImageSrc', 'backgroundVideoSrc', 'backgroundVideoAutoplay', 'backgroundVideoLoop', 'backgroundVideoMuted', 'backgroundOverlayColor', 'backgroundOverlayOpacity'].includes(key))) return null; if (typeof value === 'string' || typeof value === 'number') { return renderInput(key, value, 'text'); } if (typeof value === 'boolean') { return renderInput(key, value, 'boolean'); } return null; })}</div></details> <details className="prop-section"><summary className="text-xs font-semibold text-slate-500 uppercase cursor-pointer hover:text-cyan-600 py-1">Raw JSON</summary><pre className="bg-slate-100 p-2.5 rounded-lg overflow-x-auto mt-1 text-[10px] leading-relaxed shadow-inner">{JSON.stringify(props, null, 2)}</pre></details>
      {isGlobalContext && onDeleteGlobalElement && (
        <div className="mt-4 pt-4 border-t border-slate-200">
          <button
            onClick={() => onDeleteGlobalElement(elementType)}
            className="w-full px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 text-sm font-medium transition-colors shadow-md flex items-center justify-center space-x-2"
          >
            <LucideIcons.Trash2 className="w-4 h-4" />
            <span>Remove Global {elementType.charAt(0).toUpperCase() + elementType.slice(1)}</span>
          </button>
        </div>
      )}
    </div> </div> ); }

function CanvasArea({ pageLayout, onUpdateProps, onDelete, onSelect, selectedItemId, onOpenStructureModal, isPreviewMode, onNavigate }) { const { setNodeRef: setPageDroppableRef, isOver: isPageOver } = useDroppable({ id: 'page-sections-droppable', data: { type: 'page', accepts: ['paletteItem', 'section'] }, disabled: isPreviewMode, }); const sectionIds = useMemo(() => pageLayout.map(sec => sec.id), [pageLayout]); return ( <div className={`flex-1 overflow-y-auto scrollbar-thin scrollbar-thumb-slate-400/70 scrollbar-track-slate-200/50 scrollbar-thumb-rounded-full ${isPreviewMode ? 'p-0 bg-white' : 'p-4 md:p-6 bg-slate-100'}`}> <div className={`${isPreviewMode ? '' : 'max-w-5xl mx-auto'}`}> <SortableContext items={sectionIds} strategy={verticalListSortingStrategy} disabled={isPreviewMode}> <div ref={setPageDroppableRef} className={`min-h-[calc(100vh-12rem)] rounded-xl ${isPreviewMode ? '' : `p-2 sm:p-3 transition-all duration-200 ease-in-out canvas-render-area ${isPageOver ? 'bg-cyan-100/70 ring-2 ring-cyan-400 ring-dashed' : ''} ${pageLayout.length === 0 && !isPageOver ? 'border-2 border-dashed border-slate-300/80' : 'border-transparent'}`}`}> {pageLayout.map((sec, idx) => ( <SectionComponent  key={sec.id}  sectionData={sec}  sectionIndex={idx}  onUpdateProps={onUpdateProps}  onDelete={onDelete}  onSelect={onSelect}  selectedItemId={selectedItemId}  onOpenStructureModal={onOpenStructureModal} isPreviewMode={isPreviewMode} onNavigate={onNavigate} /> ))} {!isPreviewMode && pageLayout.length === 0 && !isPageOver && ( <div className="flex flex-col items-center justify-center h-full text-center py-20 select-none pointer-events-none"> <LucideIcons.LayoutDashboard className="h-20 w-20 text-slate-300/90 mb-4" strokeWidth={1}/> <p className="text-slate-500 text-lg font-medium mt-1">Your canvas is empty!</p> <p className="text-slate-400/90 text-sm">Drag elements here or use "Add New Section".</p> </div> )} </div> </SortableContext> </div> </div> ); }

function PagePreviewRenderer({ pageLayout, globalNavbar, globalFooter, onNavigate, previewDevice, activePageId, selectedItem, onSelectGlobalElement, onUpdateGlobalElementProps, onDeleteGlobalElement }) {
  const deviceWidths = { mobile: '375px', tablet: '768px', desktop: '100%' };
  return (
    <div className={`flex-1 overflow-hidden bg-slate-200 flex justify-center items-start pt-4 md:pt-8`}>
      <div
        style={{ width: deviceWidths[previewDevice], transition: 'width 0.3s ease-in-out' }}
        className={`h-[calc(100%-2rem)] md:h-[calc(100%-4rem)] bg-white shadow-2xl rounded-t-lg overflow-y-auto scrollbar-thin scrollbar-thumb-slate-400 scrollbar-track-slate-100`}
      >
        <div className="max-w-full mx-auto">
          {globalNavbar && (
            <NavbarElement
              {...globalNavbar.props}
              path={globalNavbar.path}
              isSelected={selectedItem?.id === globalNavbar.id}
              onSelect={() => onSelectGlobalElement('navbar')}
              onUpdate={(newProps) => onUpdateGlobalElementProps('navbar', newProps)}
              onDelete={() => onDeleteGlobalElement('navbar')}
              isPreviewMode={true}
              onNavigate={onNavigate}
            />
          )}
          {pageLayout && pageLayout.map((sec, idx) => (
            <SectionComponent
              key={`${activePageId}-${sec.id}-${idx}`}
              sectionData={sec}
              sectionIndex={idx}
              onUpdateProps={() => {}}
              onDelete={() => {}}
              onSelect={() => {}}
              selectedItemId={null}
              onOpenStructureModal={() => {}}
              isPreviewMode={true}
              onNavigate={onNavigate}
            />
          ))}
          {globalFooter && (
            <FooterElement
              {...globalFooter.props}
              path={globalFooter.path}
              isSelected={selectedItem?.id === globalFooter.id}
              onSelect={() => onSelectGlobalElement('footer')}
              onUpdate={(newProps) => onUpdateGlobalElementProps('footer', newProps)}
              onDelete={() => onDeleteGlobalElement('footer')}
              isPreviewMode={true}
              onNavigate={onNavigate}
            />
          )}
        </div>
      </div>
    </div>
  );
}

function PageActions({ onSave, onTogglePreview, isPreviewMode, pages, activePageId, onSelectPage, onRenamePage, onDeletePage, previewDevice, onSetPreviewDevice, modalStates, setModalStates }) {
  const [showDeviceOptions, setShowDeviceOptions] = useState(false);
  const [isSmallScreen, setIsSmallScreen] = useState(window.innerWidth < 640);
  useEffect(() => { const handleResize = () => setIsSmallScreen(window.innerWidth < 640); window.addEventListener('resize', handleResize); return () => window.removeEventListener('resize', handleResize); }, []);

  const handleRename = () => {
    setModalStates(prev => ({ ...prev, renamePage: { isOpen: true, pageId: activePageId, currentName: pages[activePageId]?.name || '' } }));
  };
  const handleDelete = () => {
    if (Object.keys(pages).length <= 1) {
      setModalStates(prev => ({ ...prev, alert: { isOpen: true, title: "Error", message: "Cannot delete the last page." } }));
      return;
    }
    setModalStates(prev => ({ ...prev, deletePage: { isOpen: true, pageId: activePageId, pageName: pages[activePageId]?.name || 'this page' } }));
  };

  const deviceButtons = ( <> <button onClick={() => {onSetPreviewDevice('mobile'); if(isSmallScreen) setShowDeviceOptions(false);}} title="Mobile View (375px)" className={`p-1.5 rounded-md ${previewDevice === 'mobile' ? 'bg-indigo-500 text-white' : 'text-slate-500 hover:bg-slate-100'}`}><LucideIcons.Smartphone className="w-4 h-4"/></button> <button onClick={() => {onSetPreviewDevice('tablet'); if(isSmallScreen) setShowDeviceOptions(false);}} title="Tablet View (768px)" className={`p-1.5 rounded-md ${previewDevice === 'tablet' ? 'bg-indigo-500 text-white' : 'text-slate-500 hover:bg-slate-100'}`}><LucideIcons.Tablet className="w-4 h-4"/></button> <button onClick={() => {onSetPreviewDevice('desktop'); if(isSmallScreen) setShowDeviceOptions(false);}} title="Desktop View (100%)" className={`p-1.5 rounded-md ${previewDevice === 'desktop' ? 'bg-indigo-500 text-white' : 'text-slate-500 hover:bg-slate-100'}`}><LucideIcons.Monitor className="w-4 h-4"/></button> </> );
  return ( <div className={`bg-white p-2.5 border-b border-slate-200/90 shadow-sm print-hidden`}> <div className="max-w-full mx-auto px-2 sm:px-4 flex justify-between items-center"> <div className="flex items-center space-x-2"> {!isPreviewMode && Object.keys(pages).length > 0 && ( <> <span className="text-xs text-slate-500 mr-1">Editing:</span> <span className="text-xs font-semibold text-cyan-700">{pages[activePageId]?.name || '...'}</span> <button onClick={handleRename} title="Rename Current Page" className="p-1.5 text-slate-600 hover:text-cyan-600 rounded-md hover:bg-cyan-50 transition-colors"><LucideIcons.Edit3 className="w-3.5 h-3.5"/></button> {Object.keys(pages).length > 1 && <button onClick={handleDelete} title="Delete Current Page" className="p-1.5 text-red-500 hover:text-red-700 rounded-md hover:bg-red-100 transition-colors"><LucideIcons.Trash className="w-3.5 h-3.5"/></button>} </> )} {isPreviewMode && ( <div className="relative"> {isSmallScreen ? ( <button onClick={() => setShowDeviceOptions(prev => !prev)} className="p-1.5 text-slate-500 hover:bg-slate-100 rounded-md"><LucideIcons.LayoutPanelTop className="w-4 h-4"/></button> ) : ( <div className="flex items-center space-x-1">{deviceButtons}</div> )} {isSmallScreen && showDeviceOptions && ( <div className="absolute top-full left-0 mt-1.5 bg-white p-1.5 rounded-md shadow-lg border border-slate-200 flex space-x-1 z-10"> {deviceButtons} </div> )} </div> )} </div> <div className="flex items-center space-x-2.5"> <button  onClick={onTogglePreview}  className="px-3.5 py-1.5 text-xs font-semibold text-white bg-indigo-500 rounded-md hover:bg-indigo-600 transition-colors shadow-sm focus:outline-none focus-visible:ring-2 focus-visible:ring-indigo-400" > {isPreviewMode ? 'Back to Editor' : 'Preview Page'} </button> {!isPreviewMode && ( <button  onClick={onSave}  className="px-3.5 py-1.5 text-xs font-semibold text-white bg-cyan-500 rounded-md hover:bg-cyan-600 transition-colors shadow-sm focus:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400" > Save All Pages </button> )} </div> </div> </div> ); }

export default function ElementBuilderPage() {
  const initialPageId = generateId('page-home');
  const [pages, setPages] = useState({ [initialPageId]: { id: initialPageId, name: 'Home', layout: [] } });
  const [activePageId, setActivePageId] = useState(initialPageId);
  const [globalNavbar, setGlobalNavbar] = useState(null);
  const [globalFooter, setGlobalFooter] = useState(null);
  const [isStructureModalOpen, setIsStructureModalOpen] = useState(false);
  const [structureModalContext, setStructureModalContext] = useState({ path: null, elementType: null });
  const [selectedItem, setSelectedItem] = useState(null);
  const [activeDragItem, setActiveDragItem] = useState(null);
  const [isPreviewMode, setIsPreviewMode] = useState(false);
  const [previewDevice, setPreviewDevice] = useState('desktop');

  const [modalStates, setModalStates] = useState({
    addPage: { isOpen: false },
    renamePage: { isOpen: false, pageId: null, currentName: '' },
    deletePage: { isOpen: false, pageId: null, pageName: '' },
    alert: { isOpen: false, title: '', message: '' },
    dragEndAlert: { isOpen: false, title: '', message: '' },
    saveConfirm: { isOpen: false, title: '', message: '' },
  });
  const closeModal = (modalName) => setModalStates(prev => ({ ...prev, [modalName]: { ...prev[modalName], isOpen: false } }));

  const sensors = useSensors( useSensor(PointerSensor, { activationConstraint: { distance: 8, }, }), useSensor(KeyboardSensor) );

  const currentPageLayout = useMemo(() => { const pageData = pages[activePageId]; const layout = pageData?.layout || []; if (!Array.isArray(layout)) { return []; } return layout; }, [pages, activePageId]);
  const updatePageLayout = (newLayoutOrCallback) => { setPages(prevPages => { const currentActivePage = prevPages[activePageId]; if (!currentActivePage) { return prevPages; } const newLayout = typeof newLayoutOrCallback === 'function' ? newLayoutOrCallback(currentActivePage.layout || []) : newLayoutOrCallback; if (!Array.isArray(newLayout)) { return prevPages; } return { ...prevPages, [activePageId]: { ...currentActivePage, layout: newLayout } }; }); };
  
  const handleAddPage = () => { setModalStates(prev => ({ ...prev, addPage: { isOpen: true } })); };
  const submitAddPage = (newPageName) => { if (newPageName && newPageName.trim() !== "") { let newPageId = newPageName.trim().toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, ''); if (!newPageId) newPageId = generateId('page'); if (pages[newPageId]) { newPageId = generateId('page'); setModalStates(prev => ({ ...prev, alert: { isOpen: true, title: "Page ID Conflict", message: `Page with ID derived from "${newPageName}" already exists. A new unique ID "${newPageId}" was generated.`}})); } setPages(prev => ({ ...prev, [newPageId]: { id: newPageId, name: newPageName.trim(), layout: [] } })); setActivePageId(newPageId); setSelectedItem(null); } };
  const handleSelectPage = (pageId) => { if(pages[pageId]) { setSelectedItem(null); setActivePageId(pageId); }};
  const submitRenamePage = (newName) => { if(newName && newName.trim() !== '' && newName.trim() !== modalStates.renamePage.currentName) { setPages(prev => ({ ...prev, [modalStates.renamePage.pageId]: { ...prev[modalStates.renamePage.pageId], name: newName.trim() }})); }};
  const confirmDeletePage = () => { const pageIdToDelete = modalStates.deletePage.pageId; if (Object.keys(pages).length <= 1) { setModalStates(prev => ({ ...prev, alert: { isOpen: true, title: "Error", message: "Cannot delete the last page." } })); return; } setPages(prev => { const newPages = {...prev}; delete newPages[pageIdToDelete]; const remainingPageIds = Object.keys(newPages); let nextActivePageId = activePageId === pageIdToDelete ? (remainingPageIds.length > 0 ? remainingPageIds[0] : null) : activePageId; if (!nextActivePageId && remainingPageIds.length > 0) { nextActivePageId = remainingPageIds[0];} else if (remainingPageIds.length === 0) { const newHomePageId = generateId('page-home'); newPages[newHomePageId] = {id: newHomePageId, name: 'Home', layout: []}; nextActivePageId = newHomePageId;} setActivePageId(nextActivePageId); return newPages; }); setSelectedItem(null); };
  const handleNavigate = (pageSlugOrId) => { const targetPageId = pageSlugOrId.startsWith('/') ? pageSlugOrId.substring(1) : pageSlugOrId; if (pages[targetPageId]) { setActivePageId(targetPageId); if (!isPreviewMode) {setIsPreviewMode(true); setSelectedItem(null);} } };

  const handleOpenStructureModal = (contextPath, forElementType = null) => { setStructureModalContext({ path: contextPath, elementType: forElementType }); setIsStructureModalOpen(true); };
  const handleSetStructure = (columnLayouts, context) => { const newColumns = columnLayouts.map(layout => ({ id: generateId('col'), type: 'column', props: { width: layout.width }, elements: [] })); updatePageLayout(prevLayout => { const newLayout = JSON.parse(JSON.stringify(prevLayout || [])); if (context.path === null && context.elementType === 'section') { const newSection = { id: generateId('section'), type: 'section', props: { backgroundType: 'none', backgroundColor: '#FFFFFF', backgroundImageSrc: '', backgroundVideoSrc: '', backgroundVideoAutoplay: true, backgroundVideoLoop: true, backgroundVideoMuted: true, backgroundOverlayColor: 'rgba(0,0,0,0.3)', backgroundOverlayOpacity: 0.0, }, columns: newColumns }; newLayout.push(newSection); } else if (context.path && context.elementType === 'innerSection') { const itemToUpdate = getItemByPath({ sections: newLayout }, context.path); if (itemToUpdate && itemToUpdate.type === 'innerSection') { itemToUpdate.columns = newColumns; } } return newLayout; }); };
  
  const handleSelect = (id, type, path) => { if (isPreviewMode) return; const itemData = getItemByPath({ sections: currentPageLayout }, path); if (itemData) { let propsToSet = itemData.props; if (type === 'element') propsToSet = { ...itemData.props, elementType: itemData.type }; setSelectedItem({ id, type, path, props: propsToSet }); } else { setSelectedItem(null); } };
  const handleSelectGlobalElement = (elementType) => { if (isPreviewMode) return; if (elementType === 'navbar' && globalNavbar) { setSelectedItem({ id: globalNavbar.id, type: 'globalElement', itemType: 'navbar', path: 'globalNavbar', props: globalNavbar.props }); } else if (elementType === 'footer' && globalFooter) { setSelectedItem({ id: globalFooter.id, type: 'globalElement', itemType: 'footer', path: 'globalFooter', props: globalFooter.props }); } else { setSelectedItem(null); } };
  
  const handleUpdateProps = (itemPath, newProps) => {
    if (itemPath === 'globalNavbar' && globalNavbar) {
      const updatedGlobalNavbar = { ...globalNavbar, props: { ...globalNavbar.props, ...newProps } };
      setGlobalNavbar(updatedGlobalNavbar);
      if (selectedItem?.path === 'globalNavbar') setSelectedItem(prev => ({ ...prev, props: updatedGlobalNavbar.props }));
    } else if (itemPath === 'globalFooter' && globalFooter) {
      const updatedGlobalFooter = { ...globalFooter, props: { ...globalFooter.props, ...newProps } };
      setGlobalFooter(updatedGlobalFooter);
      if (selectedItem?.path === 'globalFooter') setSelectedItem(prev => ({ ...prev, props: updatedGlobalFooter.props }));
    } else {
      updatePageLayout(prevLayout => {
        const newLayout = JSON.parse(JSON.stringify(prevLayout || []));
        const itemToUpdate = getItemByPath({ sections: newLayout }, itemPath);
        if (itemToUpdate) {
          if (itemToUpdate.props && typeof itemToUpdate.props === 'object') { itemToUpdate.props = { ...itemToUpdate.props, ...newProps }; }
          else { if(typeof itemToUpdate === 'object' && !itemToUpdate.props) itemToUpdate.props = {}; itemToUpdate.props = { ...itemToUpdate.props, ...newProps }; }
          if (selectedItem && selectedItem.path === itemPath) {
            const updatedItemFromLayout = getItemByPath({ sections: newLayout }, itemPath);
            if (updatedItemFromLayout) {
              let propsToSetForSelection = updatedItemFromLayout.props;
              if (selectedItem.type === 'element') propsToSetForSelection = { ...updatedItemFromLayout.props, elementType: updatedItemFromLayout.type };
              else if (selectedItem.type === 'section') propsToSetForSelection = updatedItemFromLayout.props;
              setSelectedItem(prev => ({ ...prev, props: propsToSetForSelection }));
            }
          }
          return newLayout;
        }
        return prevLayout;
      });
    }
  };

  const handleDelete = (itemPath) => { if (isPreviewMode) return; updatePageLayout(prevLayout => { const newLayout = JSON.parse(JSON.stringify(prevLayout || [])); if (deleteItemByPath({ sections: newLayout }, itemPath)) { if (selectedItem && selectedItem.path === itemPath) setSelectedItem(null); return newLayout; } return prevLayout; }); };
  const handleDeleteGlobalElement = (elementType) => { if (elementType === 'navbar') { setGlobalNavbar(null); if (selectedItem?.path === 'globalNavbar') setSelectedItem(null); } else if (elementType === 'footer') { setGlobalFooter(null); if (selectedItem?.path === 'globalFooter') setSelectedItem(null); } };
  
  const findColumn = (layout, columnId) => { for (const section of layout) { if (section.columns) { for (const col of section.columns) { if (col.id === columnId) return col; if (col.elements) { for (const el of col.elements) { if (el.type === 'innerSection' && el.columns) { const innerCol = el.columns.find(ic => ic.id === columnId); if (innerCol) return innerCol; } } } } } } return null; };
  const handleDragStart = (event) => { if (isPreviewMode) return; setActiveDragItem(event.active); };
  const handleDragEnd = (event) => { if (isPreviewMode) return; const { active, over } = event; setActiveDragItem(null); if (!over) return; if (active.id === over.id && active.data.current?.type !== 'paletteItem') return; const activeType = active.data.current?.type; const activeId = active.id; const overId = over.id; const overDataType = over.data.current?.type; const overColumnId = overDataType === 'column' ? over.data.current?.columnId : (overDataType === 'canvasElement' ? over.data.current?.parentColumnId : null);
    if (activeType === 'paletteItem') {
        const currentConfig = active.data.current.config;
        if (currentConfig.isGlobalOnly) {
            const defaultProps = AVAILABLE_ELEMENTS_CONFIG.find(el => el.id === currentConfig.id)?.defaultProps || {};
            if (currentConfig.id === 'navbar') {
                setGlobalNavbar({ id: 'global-navbar', type: 'navbar', props: { ...defaultProps }, path: 'globalNavbar' });
                handleSelectGlobalElement('navbar');
            } else if (currentConfig.id === 'footer') {
                setGlobalFooter({ id: 'global-footer', type: 'footer', props: { ...defaultProps }, path: 'globalFooter' });
                handleSelectGlobalElement('footer');
            }
            return; 
        }
    }

    updatePageLayout(prevLayout => { let newLayout = JSON.parse(JSON.stringify(prevLayout || [])); if (activeType === 'paletteItem') { const currentConfig = active.data.current.config; const newElementInstance = { id: generateId(currentConfig.id), type: currentConfig.id, props: { ...currentConfig.defaultProps } }; if (currentConfig.hasOwnColumns) newElementInstance.columns = []; if (overDataType === 'column' || (overDataType === 'canvasElement' && overColumnId)) { const targetColId = overDataType === 'column' ? over.id.replace('col-', '') : overColumnId; const targetColumn = findColumn(newLayout, targetColId); if (targetColumn) { if (!targetColumn.elements) targetColumn.elements = []; let insertAtIndex = targetColumn.elements.length; if (overDataType === 'canvasElement') { const overElementIndex = targetColumn.elements.findIndex(el => el.id === over.id); if (overElementIndex !== -1) insertAtIndex = overElementIndex; } targetColumn.elements.splice(insertAtIndex, 0, newElementInstance); } else { return prevLayout; } } else if (overDataType === 'page' || overDataType === 'section') { if (newElementInstance.type === 'innerSection') { setModalStates(prev => ({ ...prev, dragEndAlert: { isOpen: true, title: "Placement Info", message: "Inner Sections are best placed inside an existing section's column. Consider adding a section first or using 'Set Inner Structure'. This will create a new section for it." }})); } const newSection = { id: generateId('section'), type: 'section', props: { backgroundType: 'none', backgroundColor: '#FFFFFF', backgroundImageSrc: '', backgroundVideoSrc: '', backgroundVideoAutoplay: true, backgroundVideoLoop: true, backgroundVideoMuted: true, backgroundOverlayColor: 'rgba(0,0,0,0.3)', backgroundOverlayOpacity: 0.0, }, columns: [{ id: generateId('col'), type: 'column', props: { width: '100%' }, elements: [newElementInstance] }] }; let sectionInsertIndex = newLayout.length; if (overDataType === 'section') { const targetSectionIndex = newLayout.findIndex(s => s.id === over.id); if (targetSectionIndex !== -1) { sectionInsertIndex = targetSectionIndex + 1; } } newLayout.splice(sectionInsertIndex, 0, newSection); } else { return prevLayout; } } else if (activeType === 'section') { const activeSectionIndex = newLayout.findIndex(s => s.id === activeId); if (activeSectionIndex === -1) { return prevLayout; } let overSectionIndex = -1; if (overDataType === 'section' && overId !== activeId) { overSectionIndex = newLayout.findIndex(s => s.id === overId); } else if (overDataType === 'page' && overId === 'page-sections-droppable') { const potentialOverSection = newLayout.find(s => s.id === overId); if (potentialOverSection) { overSectionIndex = newLayout.findIndex(s => s.id === overId); } else { overSectionIndex = newLayout.length; } } else if (overDataType === 'column' || overDataType === 'canvasElement') { let parentSectionId = null; if (overDataType === 'column') { const colPath = over.data.current?.path; if (colPath) parentSectionId = colPath.match(/sections\[(\d+)\]/)?.[1]; if(parentSectionId && newLayout[parseInt(parentSectionId)]) parentSectionId = newLayout[parseInt(parentSectionId)]?.id; else parentSectionId = null; } else { const elPath = over.data.current?.elementData?.path; if (elPath) parentSectionId = elPath.match(/sections\[(\d+)\]/)?.[1]; if(parentSectionId && newLayout[parseInt(parentSectionId)]) parentSectionId = newLayout[parseInt(parentSectionId)]?.id; else parentSectionId = null;} if(parentSectionId) { overSectionIndex = newLayout.findIndex(s => s.id === parentSectionId); } if (overSectionIndex === -1) { overSectionIndex = newLayout.length; } } if (overSectionIndex !== -1 && activeSectionIndex !== overSectionIndex) { newLayout = arrayMove(newLayout, activeSectionIndex, overSectionIndex); } else if (overSectionIndex === -1 && overId === 'page-sections-droppable' && activeSectionIndex !== -1) { const movedSection = newLayout.splice(activeSectionIndex, 1)[0]; newLayout.push(movedSection); } else { return prevLayout; } } else if (activeType === 'canvasElement') { const sourceColumnId = active.data.current.parentColumnId; const sourceColumn = findColumn(newLayout, sourceColumnId); let targetColumn; let targetElementInsertIndex = 0; if (overDataType === 'column') { targetColumn = findColumn(newLayout, over.id.replace('col-', '')); if (targetColumn) targetElementInsertIndex = targetColumn.elements?.length || 0; } else if (overDataType === 'canvasElement') { targetColumn = findColumn(newLayout, over.data.current.parentColumnId); if (targetColumn) { const overElIdx = targetColumn.elements.findIndex(el => el.id === over.id); if (overElIdx !== -1) targetElementInsertIndex = overElIdx; else targetElementInsertIndex = targetColumn.elements?.length || 0; } } else { return prevLayout; } if (sourceColumn && targetColumn) { const activeElementIndex = sourceColumn.elements.findIndex(el => el.id === activeId); if (activeElementIndex !== -1) { const [movedElement] = sourceColumn.elements.splice(activeElementIndex, 1); if (!targetColumn.elements) targetColumn.elements = []; if (sourceColumn.id === targetColumn.id && targetElementInsertIndex > activeElementIndex) { targetElementInsertIndex--; } targetColumn.elements.splice(targetElementInsertIndex, 0, movedElement); } else { return prevLayout; } } else { return prevLayout; } } else { return prevLayout; } if (selectedItem && selectedItem.type !== 'globalElement') { const found = findItemAndPathRecursive(newLayout, selectedItem.id, 'sections'); if (found) { const { item: newItemData, path: newPath } = found; let propsToSet = newItemData.props; if (selectedItem.type === 'element') propsToSet = { ...newItemData.props, elementType: newItemData.type }; else if (selectedItem.type === 'section') propsToSet = newItemData.props; setSelectedItem({ id: selectedItem.id, type: selectedItem.type, path: newPath, props: propsToSet }); } else { setSelectedItem(null); } } return newLayout; }); };
  const togglePreviewMode = () => { if (isPreviewMode) { setIsPreviewMode(false); } else { setSelectedItem(null); setIsPreviewMode(true); } };

  useEffect(() => { if (isPreviewMode) { setSelectedItem(null); } }, [isPreviewMode, activePageId]);
  useEffect(() => { const pageExists = !!pages[activePageId]; if (!pageExists && Object.keys(pages).length > 0) { setActivePageId(Object.keys(pages)[0]); } }, [activePageId, pages]);

  const handleSave = () => {
    const saveData = {
      pages: pages,
      globalNavbar: globalNavbar,
      globalFooter: globalFooter,
    };
    console.log("All Site Data:", JSON.stringify(saveData, null, 2));
    setModalStates(prev => ({ ...prev, saveConfirm: { isOpen: true, title: "Save Successful", message: "All site data (pages, global navbar, global footer) saved to console." } }));
  };

  if (isPreviewMode) {
    return (
      <div className="flex flex-col h-screen max-h-screen font-sans bg-white overflow-hidden antialiased">
        <PageActions onTogglePreview={togglePreviewMode} isPreviewMode={isPreviewMode} onSave={handleSave} pages={pages} activePageId={activePageId} onSelectPage={handleNavigate} onRenamePage={() => {}} onDeletePage={() => {}} previewDevice={previewDevice} onSetPreviewDevice={setPreviewDevice} modalStates={modalStates} setModalStates={setModalStates} />
        <PagePreviewRenderer pageLayout={currentPageLayout} globalNavbar={globalNavbar} globalFooter={globalFooter} onNavigate={handleNavigate} previewDevice={previewDevice} activePageId={activePageId} selectedItem={selectedItem} onSelectGlobalElement={handleSelectGlobalElement} onUpdateGlobalElementProps={handleUpdateProps} onDeleteGlobalElement={handleDeleteGlobalElement} />
      </div>
    );
  }

  return (
    <DndContext sensors={sensors} collisionDetection={closestCenter} onDragStart={handleDragStart} onDragEnd={handleDragEnd} disabled={isPreviewMode} >
      <div className="flex flex-col h-screen max-h-screen font-sans bg-slate-100 overflow-hidden antialiased">
        <PageActions onSave={handleSave} onTogglePreview={togglePreviewMode} isPreviewMode={isPreviewMode} pages={pages} activePageId={activePageId} onSelectPage={handleSelectPage} onRenamePage={()=>{}} onDeletePage={()=>{}} previewDevice={previewDevice} onSetPreviewDevice={setPreviewDevice} modalStates={modalStates} setModalStates={setModalStates} />
        <div className={`flex flex-row flex-grow overflow-hidden`}>
          {selectedItem && !isPreviewMode ? ( <PropertiesPanel selectedItemData={selectedItem} onUpdateSelectedProps={handleUpdateProps} onClosePanel={() => setSelectedItem(null)} pages={pages} onDeleteGlobalElement={handleDeleteGlobalElement} /> ) : ( !isPreviewMode && <ElementPalette onAddTopLevelSection={() => handleOpenStructureModal(null, 'section')} pages={pages} activePageId={activePageId} onAddPage={handleAddPage} onSelectPage={handleSelectPage} /> )}
          <div className="flex-1 flex flex-col overflow-hidden">
            {globalNavbar && !isPreviewMode && (
                 <div className="bg-slate-50 p-1 border-b border-slate-200/70 shadow-sm">
                     <NavbarElement {...globalNavbar.props} path={globalNavbar.path} isSelected={selectedItem?.id === globalNavbar.id} onSelect={() => handleSelectGlobalElement('navbar')} onUpdate={(newProps) => handleUpdateProps('globalNavbar', newProps)} onDelete={() => handleDeleteGlobalElement('navbar')} isPreviewMode={false} onNavigate={handleNavigate} />
                 </div>
            )}
            <CanvasArea pageLayout={currentPageLayout} onUpdateProps={handleUpdateProps} onDelete={handleDelete} onSelect={handleSelect} selectedItemId={selectedItem ? selectedItem.id : null} onOpenStructureModal={handleOpenStructureModal} isPreviewMode={isPreviewMode} onNavigate={handleNavigate}/>
            {globalFooter && !isPreviewMode && (
                 <div className="bg-slate-50 p-1 border-t border-slate-200/70 shadow-sm">
                    <FooterElement {...globalFooter.props} path={globalFooter.path} isSelected={selectedItem?.id === globalFooter.id} onSelect={() => handleSelectGlobalElement('footer')} onUpdate={(newProps) => handleUpdateProps('globalFooter', newProps)} onDelete={() => handleDeleteGlobalElement('footer')} isPreviewMode={false} onNavigate={handleNavigate} />
                 </div>
            )}
          </div>
        </div>
      </div>
      <DragOverlay dropAnimation={null} zIndex={1000}>
        {activeDragItem ? ( activeDragItem.data.current?.type === 'paletteItem' ? ( <PaletteItemDragOverlay config={activeDragItem.data.current.config} /> ) : activeDragItem.data.current?.type === 'canvasElement' ? ( <div className="p-2 bg-cyan-100 border-2 border-cyan-400 rounded-lg shadow-xl opacity-90 text-sm font-semibold text-cyan-700">Moving: {AVAILABLE_ELEMENTS_CONFIG.find(c => c.id === activeDragItem.data.current?.elementType)?.name || 'Element'}</div> ) : activeDragItem.data.current?.type === 'section' ? ( <div className="p-3 bg-emerald-100 border-2 border-emerald-400 rounded-xl shadow-xl opacity-90 text-sm font-semibold text-emerald-700">Moving Section</div> ) : null ) : null}
      </DragOverlay>
      <StructureSelectorModal isOpen={isStructureModalOpen} onClose={() => setIsStructureModalOpen(false)} onSelectStructure={handleSetStructure} context={structureModalContext} />
      
      <InputModal isOpen={modalStates.addPage.isOpen} onClose={() => closeModal('addPage')} onSubmit={submitAddPage} title="Add New Page" inputLabel="Page Name" placeholder="e.g., About Us" initialValue={`Page ${Object.keys(pages).length + 1}`} />
      <InputModal isOpen={modalStates.renamePage.isOpen} onClose={() => closeModal('renamePage')} onSubmit={submitRenamePage} title="Rename Page" inputLabel="New Page Name" initialValue={modalStates.renamePage.currentName} />
      <ConfirmationModal isOpen={modalStates.deletePage.isOpen} onClose={() => closeModal('deletePage')} onConfirm={confirmDeletePage} title="Delete Page" message={`Are you sure you want to delete page "${modalStates.deletePage.pageName}"? This cannot be undone.`} />
      <ConfirmationModal isOpen={modalStates.alert.isOpen} onClose={() => closeModal('alert')} onConfirm={() => {}} title={modalStates.alert.title} message={modalStates.alert.message} confirmText="OK" confirmButtonClass="bg-cyan-500 hover:bg-cyan-600" />
      <ConfirmationModal isOpen={modalStates.dragEndAlert.isOpen} onClose={() => closeModal('dragEndAlert')} onConfirm={() => {}} title={modalStates.dragEndAlert.title} message={modalStates.dragEndAlert.message} confirmText="OK" confirmButtonClass="bg-cyan-500 hover:bg-cyan-600"/>
      <ConfirmationModal isOpen={modalStates.saveConfirm.isOpen} onClose={() => closeModal('saveConfirm')} onConfirm={() => {}} title={modalStates.saveConfirm.title} message={modalStates.saveConfirm.message} confirmText="OK" confirmButtonClass="bg-cyan-500 hover:bg-cyan-600" />
    </DndContext>
  );
}